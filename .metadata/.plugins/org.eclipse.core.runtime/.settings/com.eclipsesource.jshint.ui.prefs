config={\r\n    // JSHint Default Configuration File (as on JSHint website)\r\n    // See http\://jshint.com/docs/ for more details\r\n\r\n    "maxerr"        \: 50,       // {int} Maximum error before stopping\r\n\r\n    // Enforcing\r\n    "bitwise"       \: true,     // true\: Prohibit bitwise operators (&, |, ^, etc.)\r\n    "camelcase"     \: false,    // true\: Identifiers must be in camelCase\r\n    "curly"         \: true,     // true\: Require {} for every new block or scope\r\n    "eqeqeq"        \: true,     // true\: Require triple equals (\=\=\=) for comparison\r\n    "forin"         \: true,     // true\: Require filtering for..in loops with obj.hasOwnProperty()\r\n    "immed"         \: false,    // true\: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`\r\n    "indent"        \: 4,        // {int} Number of spaces to use for indentation\r\n    "latedef"       \: false,    // true\: Require variables/functions to be defined before being used\r\n    "newcap"        \: false,    // true\: Require capitalization of all constructor functions e.g. `new F()`\r\n    "noarg"         \: true,     // true\: Prohibit use of `arguments.caller` and `arguments.callee`\r\n    "noempty"       \: true,     // true\: Prohibit use of empty blocks\r\n    "nonew"         \: false,    // true\: Prohibit use of constructors for side-effects (without assignment)\r\n    "plusplus"      \: false,    // true\: Prohibit use of `++` & `--`\r\n    "quotmark"      \: false,    // Quotation mark consistency\:\r\n                                //   false    \: do nothing (default)\r\n                                //   true     \: ensure whatever is used is consistent\r\n                                //   "single" \: require single quotes\r\n                                //   "double" \: require double quotes\r\n    "undef"         \: true,     // true\: Require all non-global variables to be declared (prevents global leaks)\r\n    "unused"        \: true,     // true\: Require all defined variables be used\r\n    "strict"        \: true,     // true\: Requires all functions run in ES5 Strict Mode\r\n    "trailing"      \: false,    // true\: Prohibit trailing whitespaces\r\n    "maxparams"     \: false,    // {int} Max number of formal params allowed per function\r\n    "maxdepth"      \: false,    // {int} Max depth of nested blocks (within functions)\r\n    "maxstatements" \: false,    // {int} Max number statements per function\r\n    "maxcomplexity" \: false,    // {int} Max cyclomatic complexity per function\r\n    "maxlen"        \: false,    // {int} Max number of characters per line\r\n\r\n    // Relaxing\r\n    "asi"           \: false,     // true\: Tolerate Automatic Semicolon Insertion (no semicolons)\r\n    "boss"          \: false,     // true\: Tolerate assignments where comparisons would be expected\r\n    "debug"         \: false,     // true\: Allow debugger statements e.g. browser breakpoints.\r\n    "eqnull"        \: false,     // true\: Tolerate use of `\=\= null`\r\n    "es5"           \: false,     // true\: Allow ES5 syntax (ex\: getters and setters)\r\n    "esnext"        \: false,     // true\: Allow ES.next (ES6) syntax (ex\: `const`)\r\n    "moz"           \: false,     // true\: Allow Mozilla specific syntax (extends and overrides esnext features)\r\n                                 // (ex\: `for each`, multiple try/catch, function expression\u2026)\r\n    "evil"          \: false,     // true\: Tolerate use of `eval` and `new Function()`\r\n    "expr"          \: false,     // true\: Tolerate `ExpressionStatement` as Programs\r\n    "funcscope"     \: false,     // true\: Tolerate defining variables inside control statements"\r\n    "globalstrict"  \: false,     // true\: Allow global "use strict" (also enables 'strict')\r\n    "iterator"      \: false,     // true\: Tolerate using the `__iterator__` property\r\n    "lastsemic"     \: false,     // true\: Tolerate omitting a semicolon for the last statement of a 1-line block\r\n    "laxbreak"      \: false,     // true\: Tolerate possibly unsafe line breakings\r\n    "laxcomma"      \: false,     // true\: Tolerate comma-first style coding\r\n    "loopfunc"      \: false,     // true\: Tolerate functions being defined in loops\r\n    "multistr"      \: false,     // true\: Tolerate multi-line strings\r\n    "proto"         \: false,     // true\: Tolerate using the `__proto__` property\r\n    "scripturl"     \: false,     // true\: Tolerate script-targeted URLs\r\n    "smarttabs"     \: false,     // true\: Tolerate mixed tabs/spaces when used for alignment\r\n    "shadow"        \: false,     // true\: Allows re-define variables later in code e.g. `var x\=1; x\=2;`\r\n    "sub"           \: false,     // true\: Tolerate using `[]` notation when it can still be expressed in dot notation\r\n    "supernew"      \: false,     // true\: Tolerate `new function () { ... };` and `new Object;`\r\n    "validthis"     \: false,     // true\: Tolerate using this in a non-constructor function\r\n\r\n    // Environments\r\n    "browser"       \: true,     // Web Browser (window, document, etc)\r\n    "couch"         \: false,    // CouchDB\r\n    "devel"         \: true,     // Development/debugging (alert, confirm, etc)\r\n    "dojo"          \: false,    // Dojo Toolkit\r\n    "jquery"        \: false,    // jQuery\r\n    "mootools"      \: false,    // MooTools\r\n    "node"          \: false,    // Node.js\r\n    "nonstandard"   \: false,    // Widely adopted globals (escape, unescape, etc)\r\n    "prototypejs"   \: false,    // Prototype and Scriptaculous\r\n    "rhino"         \: false,    // Rhino\r\n    "worker"        \: false,    // Web Workers\r\n    "wsh"           \: false,    // Windows Scripting Host\r\n    "yui"           \: false,    // Yahoo User Interface\r\n\r\n    // Legacy\r\n    "nomen"         \: false,    // true\: Prohibit dangling `_` in variables\r\n    "onevar"        \: false,    // true\: Allow only one `var` statement per function\r\n    "passfail"      \: false,    // true\: Stop on first error\r\n    "white"         \: false,    // true\: Check against strict whitespace and indentation rules\r\n\r\n    // Custom Globals\r\n    "globals"       \: {}        // additional predefined global variables\r\n}
customJshintPath=D\:\\eclipse\\configuration\\jshint.js
eclipse.preferences.version=1
useCustomJshint=true
