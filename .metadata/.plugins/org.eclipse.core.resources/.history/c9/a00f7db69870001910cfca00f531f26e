/**
 * @NApiVersion 2.x
 * @NScriptType Restlet
 * @NModuleScope SameAccount
 * @NAmdConfig ./config.json
 * @author Zhu Yanlong
 */
/////////////////////////BOM接口////////////////////////////
//	
//	PUT
//
//////////////////////////////////////////////////////////
define([ 'N/record', 'N/search', 'N/runtime', 'dao' ], function(record, search,
		runtime, dao) {

	/**
	 * Function called upon sending a PUT request to the RESTlet.
	 * 
	 * @param {string | Object} requestBody - The HTTP request body; request body will be passed into function as a string when request Content-Type is
	 *            'text/plain' or parsed into an Object when request Content-Type is 'application/json' (in which case the body must be a valid JSON)
	 * @returns {string | Object} HTTP response body; return string when request Content-Type is 'text/plain'; return Object when request Content-Type is
	 *          'application/json'
	 * @since 2015.2
	 */
	function doPut(requestBody) {
		/* requestBody.recordType : bom|bomrevision|Components
		 * 
		 * if bom
		 * requestBody.assemblyItemNumber : 
		 * requestBody.values[{name,memo,isinactive}]
		 * 
		 * if bomrevision
		 * requestBody.assemblyItemNumber : 
		 * requestBody.bomRevisionName
		 * requestBody.values[{name,memo,isinactive}]
		 * 
		 * if components
		 * requestBody.assemblyItemNumber : 
		 * requestBody.bomRevisionName
		 * requestBody.components[{linenumber,item,bomquantity,componentyield,itemsource}]
		 */
		if (requestBody)
			var recordType = requestBody.recordType;
		if (recordType == null) {
			throw log.debug({
				title : 'error',
				details : 'the requestBody.recordType'
			});

		} else if (recordType == 'bom') {
			var bomHeaderId = dao
					.getBomHeaderRecordId(requestBody.assemblyItemNumber);
			var bomRecord = record.load({
				type : 'bom',
				id : bomHeaderId
			});

			bomRecord.setValue({
				filedId : 'memo',
				value : 'bomRecord post api test'
			});

		} else if (recordType == 'bomrevision') {
			var bomHeaderId = dao
					.getBomHeaderRecordId(requestBody.assemblyItemNumber);
			var bomRevisionId = dao
					.getBomRevisionRecordId(requestBody.assemblyItemNumber,
							requestBody.bomRevisionName);
			var bomRevisionRecord = record.load({
				type : 'bomrevision',
				id : bomRevisionId
			});
			bomRevisionRecord.setValue({
				filedId : 'memo',
				value : 'bomRevisionRecord post api test'
			});
		} else if (recordType == 'components') {
			var bomHeaderId = dao
					.getBomHeaderRecordId(requestBody.assemblyItemNumber);
			var bomRevisionId = dao
					.getBomRevisionRecordId(requestBody.assemblyItemNumber,
							requestBody.bomRevisionName);
			var bomRevisionRecord = record.load({
				type : 'bomrevision',
				id : bomRevisionId
			});

			bomRevisionRecord.selectLine({
				sublistId : 'components',//多了个s
				line : 1
			});
			bomRevisionRecord.setCurrentSublistValue({
				sublistId : 'components',
				fieldId : 'componentyield',
				value : 99.5
			});
			bomRevisionRecord.commitLine({
				sublistId : 'component'
			});
		}

	}

	return {
		put : doPut
	};
});