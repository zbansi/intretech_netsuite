/**
 * dao_eai.js
 * 
 * @NApiversion 2.x
 * @NModuleScope Public
 * @NAmdConfig /SuiteScripts/intretech/config.json
 * @author YQ12681 Zhu Yanlong
 */

define([ 'N/record', 'N/search', 'N/error', 'N/runtime', '/SuiteScripts/intretech/src/utils/search_columns',
		'/SuiteScripts/intretech/src/utils/search_filters', '/SuiteScripts/intretech/src/utils/utils' ],
/**
 * @param {record} record
 * @param {search} search
 * @param {error} error
 * @param {runtime} runtime
 * @param {columnset} columnset
 * @param {filterset} filterset
 * @param {utils} utils
 */
function(record, search, error, runtime, columnset, filterset, utils) {
	//create and save BOM and BOM Reversion
	function getRecordId(recordType, name) {

		if (!name)
			return -1;
		else {
			var filter = [];

			filter.push(search.createFilter({
				name : 'name',
				operator : search.Operator.IS,
				values : name
			}));

			var recordSet = search.create({
				type : recordType,
				filters : filter
			}).run().getRange({
				start : 0,
				end : 1
			});

			return recordSet.length == 0 ? -1 : recordSet[0].id;
		}
	}

	/**
	 * @param {String | search.Type} recordType
	 * @param {Array} filterList
	 * @param {Array} columnList
	 * @returns {Array} resultSet
	 */
	function getSearchResultSet(recordType, filterList, columnList) {
		//runPaged() 5 unit
		var pagedData = search.create({
			type : recordType,
			filters : filterList,
			columns : columnList
		}).runPaged();
		var searchResults = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			//fecth() 5 units
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {
				searchResults.push(result);
			});
		});
		return searchResults;
	}
	/**
	 * @param {String | search.Type} recordType
	 * @param {Array} filterList
	 * @param {Array} columnList
	 * @returns {Array} resultSet
	 */
	function getSearchResultSet2nd(recordType, filterList, columnList) {
		var resultSet = search.create({
			type : recordType,
			filters : filterList,
			columns : columnList
		}).run();
		var searchResults = [];
		for (var i = 0; i < 100;) {
			//10 unit
			resultSet.getRange({
				start : 0 + i * 1000,
				end : (++i) * 1000
			}).forEach(function(result) {
				searchResults.push(result);
			});
		}
		return searchResults;
	}

	function deleteRecords(recordType, recordIdList) {
		var deleteRecordIdList = [];
		recordIdList.forEach(function(recordId) {
			deleteRecordIdList.push(record['delete']({
				type : recordType,
				id : recordId
			}));
		});
		return deleteRecordIdList;
	}

	function deleteRecord(recordType, recordId) {
		return record['delete']({
			type : recordType,
			id : recordId
		});
	}

	//create and save BOM and BOM Reversion
	function getBomHeaderRecordId(bomName) {
		log.debug({
			title : "bomName",
			details : bomName
		});
		if (!bomName)
			return -1;
		else {
			var filter = [];

			filter.push(search.createFilter({
				name : 'name',
				operator : search.Operator.IS,
				values : bomName
			}));

			var bom = search.create({
				type : search.Type.BOM,
				filters : filter
			}).run().getRange({
				start : 0,
				end : 1
			});
			log.debug({
				title : 'get bom internalid',
				details : bom
			});

			return bom.length == 0 ? -1 : bom[0].id;
		}
	}

	function getBomRevisionRecordId(bomName, bomRevisionName) {
		var filter = [];

		filter.push(search.createFilter({
			name : 'name',
			operator : search.Operator.IS,
			values : bomRevisionName
		}));
		filter.push(search.createFilter({
			name : 'name',
			join : 'billofmaterials',
			operator : search.Operator.IS,
			values : bomName
		}));

		var bomRevision = search.create({
			type : search.Type.BOM_REVISION,
			filters : filter
		}).run().getRange({
			start : 0,
			end : 1
		});
		log.debug({
			title : 'get bomRevision internalid joined bomName',
			details : bomRevision
		});

		return bomRevision.length == 0 ? -1 : bomRevision[0].id;
	}

	function getBomRevisionRecordIdJoinBomId(bomId, bomRevisionName) {
		var filter = [];

		filter.push(search.createFilter({
			name : 'name',
			operator : search.Operator.IS,
			values : bomRevisionName
		}));
		filter.push(search.createFilter({
			name : 'internalId',
			join : 'billofmaterials',
			operator : search.Operator.IS,
			values : bomId
		}));

		var bomRevision = search.create({
			type : search.Type.BOM_REVISION,
			filters : filter
		}).run().getRange({
			start : 0,
			end : 1
		});
		log.debug({
			title : 'get bomRevision internalid joined bomId',
			details : bomRevision
		});

		return bomRevision.length == 0 ? -1 : bomRevision[0]['id'];
	}

	function upsertBomRecord(methodType, bomData) {
		log.debug({
			title : "bomData",
			details : bomData
		});
		log.debug({
			title : "bomData.name",
			details : bomData.name
		});

		var existedBomId = getBomHeaderRecordId(bomData.name);

		if ((existedBomId == -1 && methodType == 'POST') || (existedBomId > 0 && methodType == 'PUT')) {
			log.debug({
				title : 'existedBomId',
				details : existedBomId
			});
			try {

				//create or load a record
				if (methodType == 'POST') {
					var bomRecord = record.create({
						type : record.Type.BOM,
						isDynamic : true
					});
				} else {
					var bomRecord = record.load({
						type : record.Type.BOM,
						id : existedBomId,
						isDynamic : true
					});
				}

				log.debug({
					title : 'bomRecord 1',
					details : bomRecord
				});

				//set bom value
				for ( var key in bomData) {
					if (Object.prototype.hasOwnProperty.call(bomData, key)) {

						bomRecord.setValue({
							fieldId : key,
							value : bomData[key]
						});
					}
				}

				log.debug({
					title : 'bomRecord 2',
					details : bomRecord
				});

				var bomId = bomRecord.save({
					enableSourcing : true,
					ignoreMandatoryFields : false
				});

				log.debug({
					title : 'bomId',
					details : bomId
				});
				return bomId;

			} catch (e) {
				throw error.create({
					title : e.name,
					details : e.message + bomId
				});
			}

		}

		if (existedBomId > 0 && methodType == 'POST')
			return existedBomId;
		if (existedBomId == -1 && methodType == 'PUT') {
			throw error.create({
				title : 'BOM PUT ERROR',
				details : 'The updated bom {bomName: ' + bomData.name + '} does not exist.'
			});
		}

	}

	function upsertBomReversionRecord(methodType, bomRevisionData, bomHeaderId) {
		var existedBomRevId = getBomRevisionRecordIdJoinBomId(bomHeaderId, bomRevisionData.name);

		//		var bomName = search.lookupFields({
		//			type : search.Type.BOM,
		//			id : bomHeaderId,
		//			columns : [ 'name' ]
		//		});
		//		existedBomRevId = getBomRevisionRecordId(bomName, bomRevisionData.name);
		if ((existedBomRevId == -1 && methodType == 'POST') || (existedBomRevId > 0 && methodType == 'PUT')) {
			log.debug({
				title : 'existedBomRevId',
				details : existedBomRevId
			});

			//create or load a record
			if (methodType == 'POST') {
				var bomRevisionRecord = record.create({
					type : record.Type.BOM_REVISION,
					isDynamic : true
				});
			} else {
				var bomRevisionRecord = record.load({
					type : record.Type.BOM_REVISION,
					id : existedBomRevId,
					isDynamic : true
				});
			}
			log.debug({
				title : 'bomRevisionRecord 1',
				details : bomRevisionRecord
			});

			bomRevisionRecord.setValue({
				fieldId : 'billofmaterials',
				value : bomHeaderId
			});
			//			bomRevisionRecord.setValue({
			//				fieldId : 'effectivestartdate',
			//				value : new Date(978278400000) /*2001/1/1 上午12:00:00*/,
			//			});
			log.debug({
				title : 'bomRevisionRecord 2',
				details : bomRevisionRecord
			});

			try {
				//start set and commit bom revision data
				for ( var key in bomRevisionData) {
					if (Object.prototype.hasOwnProperty.call(bomRevisionData, key) && key != 'componentlist') {
						bomRevisionRecord.setValue({
							fieldId : key,
							value : bomRevisionData[key]
						});
						log.debug({
							title : 'bomRevisionRecord 2.1',
							details : bomRevisionRecord
						});
					}

					var test_status = Object.prototype.hasOwnProperty.call(bomRevisionData, key) && key == 'componentlist';
					log.debug({
						title : 'test_status',
						details : test_status
					});
					if (Object.prototype.hasOwnProperty.call(bomRevisionData, key) && key == 'componentlist') {

						var items = bomRevisionData[key];
						log.debug({
							title : 'component',
							details : items
						});

						if (methodType == 'POST') {
							for ( var itemIndex in items) {
								bomRevisionRecord.selectNewLine({
									sublistId : 'component'
								});

								for ( var listkey in items[itemIndex]) {
									if (Object.prototype.hasOwnProperty.call(items[itemIndex], listkey)) {
										bomRevisionRecord.setCurrentSublistValue({
											sublistId : 'component',
											fieldId : listkey,
											value : items[itemIndex][listkey]
										});
									}
								}

								bomRevisionRecord.commitLine({
									sublistId : 'component'
								});
							}
							log.debug({
								title : 'bomRevisionRecord 3',
								details : bomRevisionRecord
							});
						}
						if (methodType == 'PUT') {
							for ( var itemIndex in items) {
								var linenum = bomRevisionRecord.findSublistLineWithValue({
									sublistId : 'component',
									fieldId : items[itemIndex]['item']
								});
								log.debug({
									title : 'linenum',
									details : linenum
								});
								if (linenum >= 0) {
									bomRevisionRecord.selectLine({
										sublistId : 'component',
										line : linenum
									});
								} else {
									bomRevisionRecord.selectNewLine({
										sublistId : 'component'
									});
								}
								for ( var listkey in items[itemIndex]) {
									if (Object.prototype.hasOwnProperty.call(items[itemIndex], listkey)) {
										bomRevisionRecord.setCurrentSublistValue({
											sublistId : 'component',
											fieldId : listkey,
											value : items[itemIndex][listkey]
										});
									}
								}
								bomRevisionRecord.commitLine({
									sublistId : 'component'
								});
							}

						}

					}
				}
				//end set and commit bom revision data

				return bomRevisionRecord.save({
					enableSourcing : false,
					ignoreMandatoryFields : false
				});
			} catch (e) {
				if (e.name == 'THERE_IS_AN_OVERLAP_ON_THE_EFFECTIVE_DATE_BETWEEN_THIS_REVISION_AND_THE_FOLLOWING_REVISIONS__1') {
					var filter = [];
					filter.push(search.createFilter({
						name : 'internalId',
						join : 'billofmaterials',
						operator : search.Operator.IS,
						values : bomHeaderId
					}));
					var overlapedBomRevisions = search.create({
						type : search.Type.BOM_REVISION,
						filters : filter,
						columns : [ 'name', 'effectivestartdate', 'effectiveenddate' ]
					}).run().getRange({
						start : 0,
						end : 1
					});
					throw error.create({
						title : e.name,
						details : e.message + ' OVERLAPED BomRevisions: ' + overlapedBomRevisions
					});

				} else
					throw error.create({
						title : e.name,
						details : e.message
					});
			}

		}

		if (existedBomRevId > 0 && methodType == 'POST') {
			log.debug({
				title : 'existedBomRevId > 0 AND method = POST',
				details : existedBomRevId
			});
			return existedBomRevId;
		}
		if (existedBomRevId == -1 && methodType == 'PUT') {
			throw error.create({
				title : 'BOM Revision PUT ERROR',
				details : 'The updated bom revision {bomName: ' + bomRevisionData.name + '}  does not exist.'
			});

		}
	}

	function upsertBomAllRecord(methodType, bomAllData) {
		var result = Object.create(null);
		var bomData = bomAllData;
		var bomRevisionData = Object.create(null);
		if (Object.prototype.hasOwnProperty.call(bomAllData, 'bomRevision')) {
			bomData = utils.discardObjectKey(bomAllData, "bomRevision");
			bomRevisionData = bomAllData.bomRevision;
		}
		if (methodType == 'POST') {
			var bomHeaderId = upsertBomRecord('POST', bomData);
			log.debug("bomHeaderId: " + bomHeaderId);
			if (bomHeaderId == -1)
				throw error.create({
					title : 'BOM POST ERROR',
					details : 'The bom {bomName: ' + bomData.name + '} POST failed.'
				});
			if (!utils.isEmpty(bomRevisionData))
				var bomRevisionId = upsertBomReversionRecord('POST', bomRevisionData, bomHeaderId);

			result = {
				methodType : 'POST',
				bomHeader : bomHeaderId,
				bomRevision : bomRevisionId
			};
		}
		if (methodType == 'PUT') {
			var bomHeaderId = upsertBomRecord('PUT', bomData);
			if (bomHeaderId == -1)
				throw error.create({
					title : 'BOM PUT ERROR',
					details : 'The bom {bomName: ' + bomData.name + '} PUT failed.'
				});
			if (!utils.isEmpty(bomRevisionData))
				if (getBomRevisionRecordIdJoinBomId(bomHeaderId, bomRevisionData.name) == -1)
					var bomRevisionId = upsertBomReversionRecord('POST', bomRevisionData, bomHeaderId);
				else
					var bomRevisionId = upsertBomReversionRecord('PUT', bomRevisionData, bomHeaderId);

			result = {
				methodType : 'PUT',
				bomHeader : bomHeaderId,
				bomRevision : bomRevisionId
			};
		}

		return result;
	}

	function upsertBomAllRecordList(methodType, bomAllContent) {
		var result = [];
		var bomAllDataList = Object.create(null);
		var bomRevisionData = Object.create(null);
		if (Object.prototype.hasOwnProperty.call(bomAllContent, 'bomAllData'))
			bomAllDataList = bomAllContent.bomAllData;

		bomAllDataList.forEach(function(bomAllData) {
			var bomData = bomAllData;
			if (Object.prototype.hasOwnProperty.call(bomAllData, 'bomRevision')) {
				bomData = utils.discardObjectKey(bomAllData, "bomRevision");
				bomRevisionData = bomAllData.bomRevision;
			}
			if (methodType == 'POST') {
				var bomHeaderId = upsertBomRecord('POST', bomData);
				log.debug("bomHeaderId: " + bomHeaderId);
				if (bomHeaderId == -1)
					throw error.create({
						title : 'BOM POST ERROR',
						details : 'The bom {bomName: ' + bomData.name + '} POST failed.'
					});
				else if (!utils.isEmpty(bomRevisionData))
					if (getBomRevisionRecordIdJoinBomId(bomHeaderId, bomRevisionData.name) == -1)
						var bomRevisionId = upsertBomReversionRecord('POST', bomRevisionData, bomHeaderId);
					else
						var bomRevisionId = upsertBomReversionRecord('PUT', bomRevisionData, bomHeaderId);

				result.push({
					methodType : 'POST',
					bomHeader : bomHeaderId,
					bomRevision : bomRevisionId
				});
			}
			if (methodType == 'PUT') {
				var bomHeaderId = upsertBomRecord('PUT', bomData);
				if (bomHeaderId == -1)
					throw error.create({
						title : 'BOM PUT ERROR',
						details : 'The bom {bomName: ' + bomData.name + '} PUT failed.'
					});
				else if (!utils.isEmpty(bomRevisionData))
					var bomRevisionId = upsertBomReversionRecord('PUT', bomRevisionData, bomHeaderId);

				result.push({
					methodType : 'PUT',
					bomHeader : bomHeaderId,
					bomRevision : bomRevisionId
				});
			}
		});
		return result;
	}
	/**
	 * 获取bom revision，及其BOM和组件明细，不含关联的assembly item
	 */
	function getBomRevisionData(filterList) {
		var filters = [ [ 'isinactive', 'is', 'F' ] ];

		//		filters.push(search.createFilter({
		//			name: 'isinactive',
		//			operator: 'is',
		//			values: 'F',
		//			isor:'false',
		//			leftparens:1,
		//			rightparens:1
		//		}));				
		if (filterList && filterList[0].length > 0) {
			filters.push("and");
			filters = filters.concat(filterList);
		}
		var columns = [];
		var columnList = columnset.setColumns(search.Type.BOM_REVISION);
		var joinColumns = columnset.setJoinColumns(search.Type.BOM_REVISION);
		columns = columns.concat(columnList);
		columns = columns.concat(joinColumns);

		var pagedData = search.create({
			type : search.Type.BOM_REVISION, //bomrevision,
			filters : filters,
			columns : columns
		}).runPaged();

		var resultSet = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {
				resultSet.push(result);
			});
		});

		return resultSet;
	}

	/**
	 * 获取bom revision的组件明细
	 */
	function getBomRevisionComponents(filterList) {
		var filters = [ [ 'isinactive', 'is', 'F' ] ];
		if (filterList && filterList[0].length > 0) {
			filters.push("and");
			filters = filters.concat(filterList);
		}
		var columns = [];

		var joinColumns = columnset.setJoinColumns(search.Type.BOM_REVISION, 'component');
		columns = columns.concat(joinColumns);

		var pagedData = search.create({
			type : search.Type.BOM_REVISION, //bomrevision,
			filters : filters,
			columns : columns
		}).runPaged();

		var resultSet = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {
				resultSet.push(result);
			});
		});

		return resultSet;
	}

	/**
	 * 获取主记录AssemblyItem，及其bom，不含版本和组件明细 主记录: item joinid: assemblyitembom
	 */
	function getAssemblyBilofMaterials(filterList) {
		var filters = [ [ 'isinactive', 'is', 'F' ] ];
		if (filterList && filterList[0].length > 0) {
			filters.push("and");
			filters = filters.concat(filterList);
		}
		var resultSet = [];
		var columns = [];
		var columnList = columnset.setColumns(search.Type.ITEM);
		var columnJoins = columnset.setColumns(search.Type.ITEM);
		columns = columns.concat(columnList);
		columns = columns.concat(columnJoins);
		var pagedData = search.create({
			type : search.Type.ITEM,
			filters : filters,
			columns : columns
		}).runPaged();

		var resultSet = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {
				resultSet.push(result);
			});
		});
		return resultSet;
	}

	/**
	 * 获取主记录BOM，及其版本和关联的AssemblyItem
	 */
	function getBomAssemblyItemAndRevision() {
		var filters = [ [ 'isinactive', 'is', 'F' ] ];
		if (filterList && filterList[0].length > 0) {
			filters.push("and");
			filters = filters.concat(filterList);
		}
		var resultSet = [];
		var columns = [];
		var columnList = columnset.setColumns(search.Type.BOM);
		var columnJoins = columnset.setColumns(search.Type.BOM);
		columns = columns.concat(columnList);
		columns = columns.concat(columnJoins);
		var pagedData = search.create({
			type : search.Type.ITEM,
			filters : filters,
			columns : columns
		}).runPaged();

		var resultSet = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {
				resultSet.push(result);
			});
		});
		return resultSet;
	}

	/**
	 * 获取主记录BOM，及其关联的AssemblyItem、版本和组件明细
	 */
	function getBomAssemblyItemAndRevisionAndComponet(filterList) {
		//主字段过滤
		var filters = [ [ 'isinactive', 'is', 'F' ] ];
		if (filterList && filterList[0].length > 0) {
			filters.push("and");
			filters = filters.concat(filterList);
		}
		//外连接字段过滤
		filters = filters.concat(filterset.setJoinFilters(search.Type.BOM));

		var f = search.createFilter({
			//Name or internal ID of the joined record field.
			name : 'default',
			//Join ID for the search filter.
			join : 'assemblyitembillofmaterials',
			operator : search.Operator.IS,
			values : false
		});
		filters = filters.push("and");
		filters = filters.concat(f);

		var resultSet = [];
		var columns = [];
		var columnList = columnset.setColumns(search.Type.BOM);
		var columnJoins = columnset.setJoinColumns(search.Type.BOM);
		columns = columns.concat(columnList);
		columns = columns.concat(columnJoins);
		var pagedData = search.create({
			type : search.Type.BOM,
			filters : filters,
			columns : columns
		}).runPaged();

		var resultSet = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {

				//构建JSON格式的响应报文
				var bomObj = Object.create(null);
				//				bomObj.assemblyid = result.getValue({
				//					'name' : 'assemblyid',
				//					'joinid' : 'assemblyitem'
				//				});
				//				bomObj.assembly = result.getValue({
				//					'name' : 'assembly',
				//					'joinid' : 'assemblyitem'
				//				});
				//				bomObj['default'] = result.getValue({
				//					'name' : 'default',
				//					'joinid' : 'assemblyitem'
				//				});
				//				bomObj.billofmaterialsid = result.getValue({
				//					'name' : 'billofmaterialsid',
				//					'joinid' : 'assemblyitem'
				//				});
				bomObj.assembly = result.getText(result.columns[5]);
				bomObj.assemblyid = result.getValue(result.columns[6]);
				bomObj['default'] = result.getValue(result.columns[9]);
				bomObj.locations = result.getValue(result.columns[10]);

				bomObj.bom_id = result.getValue('internalid');
				bomObj.bom_name = result.getValue('name');
				bomObj.subsidiary = result.getValue('subsidiary');

				bomObj.revision_internalid = result.getValue({
					'name' : 'internalid',
					'joinid' : 'revision'
				});
				bomObj.revision_name = result.getValue({
					'name' : 'name',
					'joinid' : 'revision'
				});

				//添加版本的组件明细
				//获取版本id
				var revisionId = result.getValue({
					"name" : "internalid",
					"join" : "revision"
				});
				var compFilter = [ 'internalid', 'is' ];
				compFilter.push(revisionId);
				var flt = [];
				flt.push(compFilter);
				//执行子查询
				var components = getBomRevisionComponents(flt);
				//添加组件明细
				bomObj.components = components;

				resultSet.push(bomObj);
			});
		});
		return resultSet;
	}

	function upsertLocationList(methodType, locationList) {
		log.debug({
			title : "locationList",
			details : locationList
		});
		if (locationList.length > 0) {
			log.debug({
				title : "locationList length",
				details : locationList.length
			});
			var resultSet = [];

			locationList.forEach(function(locationData) {
				var exsitedLoactionId = getRecordId(record.Type.LOCATION, locationData.name);
				if (exsitedLoactionId == -1) {
					if (methodType == 'POST') {
						var locationRec = record.create({
							type : record.Type.LOCATION,
							isDynamic : true
						})
						for ( var key in locationData) {
							locationRec.setValue({
								fieldId : key,
								value : locationData[key]
							});
						}
						var locationId = locationRec.save({
							enableSourcing : true,
							ignoreMandatoryFields : false
						});
					}
					if (methodType == 'PUT') {
						throw error.create("the location you want to update isnot exsited");
					}

				} else if (methodType == 'PUT') {
					var locationRec = record.load({
						type : record.Type.LOCATION,
						id : exsitedLoactionId,
						isDynamic : true
					})
					for ( var key in locationData) {
						locationRec.setValue({
							fieldId : key,
							value : locationData[key]
						});

					}
					var locationId = locationRec.save({
						enableSourcing : true,
						ignoreMandatoryFields : false
					});
				} else if (methodType == 'POST') {
					throw error.create("the location you want to PUT has been exsited");
				}
				resultSet.push(locationId);
			});
			return resultSet;
		}
	}

	function getLocationResult(filterList) {
		var filters = [ [ 'isinactive', 'is', false ] ];
		if (filterList && filterList[0].length > 0) {
			filters.push("and");
			filters = filters.concat(filterList);
		}
		var columns = columnset.setColumns('location');
		var pagedData = search.create({
			type : search.Type.LOCATION,
			filters : filters,
			columns : columns
		}).runPaged();

		var resultSet = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {
				resultSet.push(result);
			});
		});

		return resultSet;
	}

	/*
	 * general operation
	 * 
	 */
	function getTransactionResult(searchType, filterList) {
		var filters = [ [ 'mainline', 'is', 'F' ], 'and' ];

		var filterRecordType = [ 'recordtype', 'is' ];
		filterRecordType.push(searchType);
		filters.push(filterRecordType);

		if (filterList && filterList[0].length > 0) {
			filters.push("and");
			filters = filters.concat(filterList);
		}

		var columnList = columnset.setColumns(searchType);
		var joinColumns = columnset.setJoinColumns(searchType);
		var columns = [];
		columns = columns.concat(columnList);
		columns = columns.concat(joinColumns);

		log.debug({
			title : 'filters: ',
			details : filters
		});

		var pagedData = search.create({
			type : search.Type.TRANSACTION,
			filters : filters,
			columns : columns
		}).runPaged();

		var resultSet = [];
		pagedData.pageRanges.forEach(function(pageRange) {
			var page = pagedData.fetch({
				index : pageRange.index
			});
			page.data.forEach(function(result) {
				resultSet.push(result);
			});
		});

		return resultSet;
	}

	function getWorkOrderData(filterList) {
		return getTransactionResult('workorder', filterList);
	}

	function getSalesOrderData(filterList) {

		return getTransactionResult('salesorder', filterList);

	}
	function getSalesOrderFulfillment(filterList) {
		var filters = [];
		var filterCustomer = [ 'quantity', 'notlessthan', 0 ];
		filters.push(filterCustomer);
		filters.push('and');
		filters = filters.concat(filterList);

		return getTransactionResult('itemfulfillment', filters);

	}

	function getWorkOrderIssue(filterList) {

		return getTransactionResult('workorderissue', filterList);

	}

	function getWorkOrderCompletion(filterList) {

		return getTransactionResult('workordercompletion', filterList);

	}

	function getWorkOrderClose(filterList) {

		return getTransactionResult('workorderclose', filterList);

	}

	function getTransferOrder(filterList) {

		return getTransactionResult('transferorder', filterList);

	}

	function getInventoryTransfer(filterList) {

		return getTransactionResult('inventorytransfer', filterList);

	}

	function getInventoryAdjustment(filterList) {

		return getTransactionResult('inventoryadjustment', filterList);

	}

	function getPurchaseOrder(filterList) {

		return getTransactionResult('purchaseorder', filterList);

	}

	function getItemReceipt(filterList) {

		return getTransactionResult('itemreceipt', filterList);

	}

	function getItemReceiptRMA(filterList) {
		var filters = [ [ 'salesorder', 'isnotempty' ], 'and' ];
		filters = filters.concat(filterList);

		return getTransactionResult('itemreceipt', filters);

	}

	/*
	 * Create Order Transaction general operation
	 * 需要从订单转换，再生成库存事务处理
	 * @pramas {fromType}
	 * @pramas {toType}
	 * @pramas {context} context.transactionData
	 */
	function createAndSaveOrderTransaction(fromType, toType, context) {
		var transactionResult = [];
		context.transactionData.forEach(function(transaction) {
			var rec = record.transform({
				fromType : fromType,
				fromId : transaction.order,
				toType : toType
			//通过defaultValues-inventorylocation 转换生成与之匹配的transaction lines
			//如果订单行上维护了地点，但脚本没有指明defaultValues
			//Transaction Record will return a "VALID_LINE_ITEM_REQD > 
			//You must have at least one valid line item for this transaction" error 
			//if we did not specify an inventoryLocation in the defaultValue parameter. 
			//所以建议一般不在订单行上维护地点
			//						defaultValues : {
			//							inventorylocation : 6
			//						}
			});
			var itemLine = 0;
			log.debug({
				title : 'rec ',
				details : rec
			});
			var transactionLines = Object.create(null);
			var sublistId = null;
			if (transaction.hasOwnProperty('item')) {
				transactionLines = transaction.item;
				sublistId = 'item';
			} else if (transaction.hasOwnProperty('components')) {
				transactionLines = transaction.components;
				sublistId = 'components'
			}
			transactionLines.forEach(function(item) {
				for ( var itemKey in item) {
					if (item.hasOwnProperty(itemKey) && itemKey != 'inventorydetail') {
						rec.setSublistValue({
							sublistId : sublistId,
							fieldId : itemKey,
							value : item[itemKey],
							line : itemLine
						});
					}
				}
				var subrec = rec.getSublistSubrecord({
					sublistId : sublistId,
					line : itemLine,
					fieldId : 'inventorydetail'
				});
				itemLine++;
				var i = 0;
				item.inventorydetail.forEach(function(detail) {
					if (toType == record.Type.ITEM_FULFILLMENT || toType == record.Type.WORK_ORDER_ISSUE) {
						subrec.setSublistValue({
							sublistId : 'inventoryassignment',
							fieldId : 'issueinventorynumber',
							value : detail.lotnumber,
							line : i
						});
					} else if (toType == record.Type.ITEM_RECEIPT || toType == record.Type.WORK_ORDER_COMPLETION) {
						subrec.setSublistValue({
							sublistId : 'inventoryassignment',
							fieldId : 'receiptinventorynumber',
							value : detail.lotnumber,
							line : i
						});
						subrec.setSublistValue({
							sublistId : 'inventoryassignment',
							fieldId : 'expirationdate',
							value : detail.expirationdate,
							line : i
						});
					}
					subrec.setSublistValue({
						sublistId : 'inventoryassignment',
						fieldId : 'binnumber',
						value : detail.binnumber,
						line : i
					});
					subrec.setSublistValue({
						sublistId : 'inventoryassignment',
						fieldId : 'inventorystatus',
						value : detail.status,
						line : i
					});
					subrec.setSublistValue({
						sublistId : 'inventoryassignment',
						fieldId : 'quantity',
						value : detail.quantity,
						line : i
					});
					i++;
				});

			});

			var transactionId = rec.save({
				enableSourcing : false,
				ignoreMandatoryFields : true
			});

			transactionResult.push(transactionId);

		});

		return {
			'isSuccess' : true,
			transactionResult : transactionResult
		};
	}

	function createAndSaveSalesOrderFulfillment(context) {
		return createAndSaveOrderTransaction(record.Type.SALES_ORDER, record.Type.ITEM_FULFILLMENT, context);
	}

	function createAndSaveReturnMaterialItemReceipt(context) {
		return createAndSaveOrderTransaction(record.Type.RETURN_AUTHORIZATION, record.Type.ITEM_RECEIPT, context);
	}

	function createAndSaveWorkOrderIssue(context) {
		return createAndSaveOrderTransaction(record.Type.WORK_ORDER, record.Type.WORK_ORDER_ISSUE, context);
	}

	function createAndSaveWorkOrderCompletion(context) {
		return createAndSaveOrderTransaction(record.Type.WORK_ORDER, record.Type.WORK_ORDER_COMPLETION, context);
	}

	function createAndSaveWorkOrderClose(context) {
		return createAndSaveOrderTransaction(record.Type.WORK_ORDER, record.Type.WORK_ORDER_CLOSE, context);
	}

	function createAndSavePurchaseOrderItemReceipt(context) {
		return createAndSaveOrderTransaction(record.Type.PURCHASE_ORDER, record.Type.ITEM_RECEIPT, context);
	}

	function createAndSaveVendorReturnItemFulfillment(context) {
		return createAndSaveOrderTransaction(record.Type.VENDOR_RETURN_AUTHORIZATION, record.Type.ITEM_FULFILLMENT, context);
	}

	/*
	 * Creat and save Inventory Transaction
	 * 不需要从订单转换，直接生成库存事务处理
	 * @pramas {recordType} 可用类型有INVENTORY_ADJUSTMENT, INVENTORY_TRANSFER
	 * @pramas {context} context.transactionData
	 */
	function createAndSaveInventoryTransaction(recordType, context) {
		var transactionResult = [];

		var transactionData = context.transactionData;

		transactionData.forEach(function(transaction) {
			var rec = record.create({
				type : recordType,
				isDynamic : true
			});
			for ( var key in transaction) {
				if (transaction.hasOwnProperty(key) && key != 'inventory') {
					rec.setValue({
						fieldId : key,
						value : transaction[key]
					});
				} else if (transaction.hasOwnProperty(key) && key == 'inventory') {
					var j = 0;
					rec.selectNewLine({
						sublistId : 'inventory'
					});
					transaction.inventory.forEach(function(line) {
						for ( var lineKey in line) {
							if (line.hasOwnProperty(lineKey) && lineKey != 'inventorydetail') {
								rec.setCurrentSublistValue({
									sublistId : 'inventory',
									fieldId : lineKey,
									value : line[lineKey],
									line : j
								});
							}
						}
						var subrec = rec.getCurrentSublistSubrecord({
							sublistId : 'inventory',
							line : j,
							fieldId : 'inventorydetail'
						});
						j++;
						var i = 0;
						subrec.selectNewLine({
							sublistId : 'inventoryassignment'
						});
						line.inventorydetail.forEach(function(detail) {
							for ( var detailKey in detail) {
								if (detail.hasOwnProperty(detailKey)) {
									subrec.setCurrentSublistValue({
										sublistId : 'inventoryassignment',
										fieldId : detailKey,
										value : detail[detailKey],
										line : i
									});
								}
							}
							subrec.commitLine('inventoryassignment');
							i++;
						});
						rec.commitLine({
							sublistId : 'inventory'
						});
					});
				}
			}

			var transId = rec.save({
				enableSourcing : false,
				ignoreMandatoryFields : true
			});
			log.debug({
				title : 'transId ',
				details : transId
			});
			transactionResult.push(transId);
		});

		return {
			"isSuccess" : true,
			"transactionResult" : transactionResult
		}
	}

	/**
	 * context.transactionData
	 */
	function createAndSaveInventoryTransfer(context) {
		return createAndSaveInventoryTransaction(record.Type.INVENTORY_TRANSFER, context);
	}

	/**
	 * context.transactionData
	 */
	function createAndSaveInventoryAdjustment(context) {
		return createAndSaveInventoryTransaction(record.Type.INVENTORY_ADJUSTMENT, context);
	}

	return {
		'getRecordId' : getRecordId,
		'getSearchResultSet' : getSearchResultSet,
		'getSearchResultSet2nd' : getSearchResultSet2nd,
		'deleteRecords' : deleteRecords,
		'deleteRecord' : deleteRecord,
		'getBomHeaderRecordId' : getBomHeaderRecordId,
		'getBomRevisionRecordId' : getBomRevisionRecordId,
		'getBomRevisionRecordIdJoinBomId' : getBomRevisionRecordIdJoinBomId,
		'upsertBomRecord' : upsertBomRecord,
		'upsertBomReversionRecord' : upsertBomReversionRecord,
		'upsertBomAllRecord' : upsertBomAllRecord,
		'upsertBomAllRecordList' : upsertBomAllRecordList,
		'getAssemblyBilofMaterials' : getAssemblyBilofMaterials,
		'getBomRevisionData' : getBomRevisionData,
		'getBomAssemblyItemAndRevisionAndComponet' : getBomAssemblyItemAndRevisionAndComponet,
		'getBomRevisionComponents' : getBomRevisionComponents,
		'upsertLocationList' : upsertLocationList,
		'getLocationResult' : getLocationResult,

		//get Transaction Data
		'getTransactionResult' : getTransactionResult,
		'getWorkOrderData' : getWorkOrderData,
		'getSalesOrderData' : getSalesOrderData,
		'getSalesOrderFulfillment' : getSalesOrderFulfillment,
		'getWorkOrderIssue' : getWorkOrderIssue,
		'getWorkOrderCompletion' : getWorkOrderCompletion,
		'getWorkOrderClose' : getWorkOrderClose,
		'getTransferOrder' : getTransferOrder,
		'getInventoryTransfer' : getInventoryTransfer,
		'getInventoryAdjustment' : getInventoryAdjustment,
		'getPurchaseOrder' : getPurchaseOrder,
		'getItemReceipt' : getItemReceipt,
		'getItemReceiptRMA' : getItemReceiptRMA,

		//createAndSaveOrderTransaction
		'createAndSaveOrderTransaction' : createAndSaveOrderTransaction,
		'createAndSaveSalesOrderFulfillment' : createAndSaveSalesOrderFulfillment,
		'createAndSaveReturnMaterialItemReceipt' : createAndSaveReturnMaterialItemReceipt,
		'createAndSaveWorkOrderIssue' : createAndSaveWorkOrderIssue,
		'createAndSaveWorkOrderCompletion' : createAndSaveWorkOrderCompletion,
		'createAndSaveWorkOrderClose' : createAndSaveWorkOrderClose,
		'createAndSavePurchaseOrderItemReceipt' : createAndSavePurchaseOrderItemReceipt,
		'createAndSaveVendorReturnItemFulfillment' : createAndSaveVendorReturnItemFulfillment,

		//createAndSaveInventoryTransaction
		'createAndSaveInventoryTransaction' : createAndSaveInventoryTransaction,
		'createAndSaveInventoryTransfer' : createAndSaveInventoryTransfer,
		'createAndSaveInventoryAdjustment' : createAndSaveInventoryAdjustment

	};
});
