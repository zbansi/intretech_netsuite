package com.bansi.webservices.samples.test;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import com.netsuite.webservices.lists.accounting_2019_1.Bom;
import com.netsuite.webservices.platform.core_2019_1.RecordRef;
import com.netsuite.webservices.platform.core_2019_1.RecordRefList;
import com.netsuite.webservices.platform.core_2019_1.types.RecordType;

public class Test {

	public static void main(String[] args) throws IOException {
		long start = System.currentTimeMillis();
		//new FileInputStream("interfacedata.json");
		BufferedInputStream in = null;
		try {
			in = new BufferedInputStream(new FileInputStream("interface_data.json"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String object = "";
		try {
			while (in.available() != 0) {
				//System.out.print((char) in.read());
				object += (char) in.read();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//

		System.out.println("object: \n" + object);

		JSONObject jsonObject = JSONObject.fromObject(object);
		/*
		jsonObject.accumulate("name", "suitetalk.bom.test");
		jsonObject.accumulate("usedOnAssembly", true);
		jsonObject.accumulate("createdDate", "5/21/2019");
		jsonObject.accumulate("isInactive", false);
		jsonObject.accumulate("useComponentYield", true);
		jsonObject.accumulate("memo", "test by bansi");
		jsonObject.accumulate("legacyBomForAssembly", "");
		jsonObject.accumulate("availableForAllAssemblies", false);
		jsonObject.accumulate("restrictToAssembliesList", "");
		jsonObject.accumulate("availableForAllLocations", "");
		jsonObject.accumulate("restrictToLocationsList", "");
		jsonObject.accumulate("subsidiaryList", "");
		jsonObject.accumulate("includeChildren", true);
		jsonObject.accumulate("customFieldList", "");
		jsonObject.accumulate("internalId", "1001");
		jsonObject.accumulate("externalId", "1234");
		*/
		JSONArray bomJsonArray = jsonObject.getJSONArray("bomAllData");

		for (int i = 0; i < bomJsonArray.size(); i++) {
			JSONObject bomJsonObject = bomJsonArray.getJSONObject(i);
			bomJsonObject = bomJsonObject.discard("bomRevision");

			RecordRef assembly = new RecordRef();
			assembly.setInternalId(bomJsonObject.getString("restrictToAssembliesList"));
			assembly.setType(RecordType.assemblyItem);
			RecordRefList restrictToAssembliesList = new RecordRefList();
			restrictToAssembliesList.setRecordRef(new RecordRef[] { assembly });
			bomJsonObject = bomJsonObject.discard("restrictToAssembliesList");
			bomJsonObject = bomJsonObject.element("restrictToAssembliesList", restrictToAssembliesList);

			bomJsonObject = bomJsonObject.discard("subsidiaryList");
			//subsidiaryList
			/*
			RecordRef subsidiary = new RecordRef();
			subsidiary.setInternalId(bomJsonObject.getString("subsidiaryList"));
			subsidiary.setType(RecordType.subsidiary);
			RecordRefList subsidiaryList = new RecordRefList();
			subsidiaryList.setRecordRef(new RecordRef[] { subsidiary });
			
			bomJsonObject = bomJsonObject.element("subsidiaryList", subsidiaryList);
			*/

			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.setRootClass(Bom.class);
			Bom newBom = (Bom) JSONObject.toBean(bomJsonObject, jsonConfig);

			System.out.println(newBom.toString());
			System.out.println(newBom.getName());
			System.out.println(newBom.getMemo());
			System.out.println(newBom.getAvailableForAllAssemblies());
			System.out.println(newBom.getAvailableForAllLocations());
			System.out.println(newBom.getIncludeChildren());
		}
		long time = System.currentTimeMillis() - start;
		System.out.println("TIME: " + time + " ms");

	}
}
