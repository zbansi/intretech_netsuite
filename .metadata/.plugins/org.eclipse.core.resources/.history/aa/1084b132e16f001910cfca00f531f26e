/**
 * @NApiVersion 2.x
 * @NScriptType Restlet
 * @NModuleScope SameAccount
 * @NAmdConfig ./config.json
 * @author Zhu Yanlong
 */
/////////////////////////BOM接口////////////////////////////
//	POST
// 	GET
//	DELETE
//	PUT
//////////////////////////////////////////////////////////
define(
		[ 'N/record', 'N/search', 'N/runtime', 'dao' ],
		function(record, search, runtime, dao) {
			//create and save BOM and BOM Reversion
			function getBomHeaderRecordId(bomName) {
				var filter = [];

				filter.push(search.createFilter({
					name : 'name',
					operator : search.Operator.IS,
					values : bomName
				}));

				var bom = search.create({
					type : search.Type.BOM,
					filters : filter
				}).run().getRange({
					start : 0,
					end : 1
				});
				log.debug({
					title : 'get bom internalid',
					details : bom
				});

				return bom[0].id;
			}

			function getBomRevisionRecordId(bomRevisionName) {
				var filter = [];

				filter.push(search.createFilter({
					name : 'name',
					operator : search.Operator.IS,
					values : bomRevisionName
				}));

				var bomRevision = search.create({
					type : search.Type.BOM_REVISION,
					filters : filter
				}).run().getRange({
					start : 0,
					end : 1
				});
				log.debug({
					title : 'get bomRevision internalid',
					details : bomRevision
				});

				return bomRevision[0].id;
			}

			function createAndSaveBomRecord(bomData) {

				var bomRecord = record.create({
					type : record.Type.BOM,
					isDynamic : true
				});
				for ( var key in bomData) {
					if (bomData.hasOwnProperty(key)) {
						bomRecord.setValue({
							fieldId : key,
							value : bomData[key]
						});
					}
				}
				try {
					return bomRecord.save({
						enableSourcing : false,
						ignoreMandatoryFields : false
					});
				} catch (e) {
					if (e.name == 'A_1_WITH_THIS_NAME_ALREADY_EXISTS_PLEASE_USE_ANOTHER') {
						log
								.debug({
									title : 'bom hearder has existed, go on to add bomrevision. '
											+ e.name,
									details : e.message
								});

						return getBomHeaderRecordId(bomData.name);
					} else

						log.debug({
							title : e.name,
							details : e.message
						});
				}

			}		

			/**
			 * Function called upon sending a DELETE request to the RESTlet.
			 * 
			 * @param {Object} requestParams - Parameters from HTTP request URL; parameters will be passed into function as an Object (for all supported content
			 *            types)
			 * @returns {string | Object} HTTP response body; return string when request Content-Type is 'text/plain'; return Object when request Content-Type
			 *          is 'application/json'
			 * @since 2015.2
			 */
			/* DELETE Method 报文传参格式
			 * recordType: string
			 * recordId: string 多个id以逗号分隔			 * 
			 */
			function doDelete(requestParams) {
				log.debug({
					title : "deleteRequestParams: ",
					details : requestParams
				});
				try {
					var deleteResult = dao.deleteRecords(
							requestParams.recordType, requestParams.recordId
									.split(","));
					//					var deleteRecordId = dao.deleteRecord(
					//							requestParams.recordType, requestParams.recordId);
					log.debug({
						title : 'addSuccess',
						details : deleteResult
					});
					return {
						deletedBOMId : deleteResult
					};

				} catch (e) {
					log.debug({
						title : 'delelteError ' + e.name,
						details : e.message
					})
				}
			}

			return {
				'get' : doGet,
				put : doPut,
				post : doPost,
				'delete' : doDelete
			};
		});