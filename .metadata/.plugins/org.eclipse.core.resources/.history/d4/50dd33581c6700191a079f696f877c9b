package com.netsuite.suitetalk.client.v2017_2;
import com.netsuite.suitetalk.client.common.authentication.OAuthPassport;
import com.netsuite.suitetalk.client.common.authentication.Passport;
import com.netsuite.suitetalk.client.common.authentication.SsoPassport;
import com.netsuite.suitetalk.client.common.authentication.TokenPassport;
import com.netsuite.suitetalk.client.common.contract.WebServicesSoapClient;
import com.netsuite.suitetalk.client.v2017_2.utils.Utils;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.AsyncStatusResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.AttachBasicReference;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.AttachContactReference;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.AttachReference;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.BaseRef;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.BaseRefList;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.BudgetExchangeRate;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.BudgetExchangeRateFilter;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.BudgetExchangeRateList;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.ChangeEmail;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.ChangePassword;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.CurrencyRate;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.CurrencyRateFilter;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.CurrencyRateList;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.CustomizationRef;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.CustomizationRefList;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.CustomizationType;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.DataCenterUrls;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.DeletedRecord;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.DeletionReason;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.DetachBasicReference;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.DetachReference;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetAllRecord;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetAllResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetBudgetExchangeRateResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetCurrencyRateResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetCustomizationIdResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetDataCenterUrlsResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetDeletedFilter;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetDeletedResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetItemAvailabilityResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetPostingTransactionSummaryResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetSavedSearchRecord;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetSavedSearchResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetSelectValueFieldDescription;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetSelectValueResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.GetServerTimeResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.InitializeRecord;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.InitializeRef;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.ItemAvailability;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.ItemAvailabilityFilter;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.ItemAvailabilityList;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.PostingTransactionSummaryField;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.PostingTransactionSummaryFilter;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.Record;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.RecordRef;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.RecordRefList;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.SearchRecord;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.SearchResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.SsoCredentials;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.UpdateInviteeStatusReference;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.types.AsyncStatusType;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.types.CalendarEventAttendeeResponse;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.types.GetAllRecordType;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.types.GetCustomizationType;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.types.InitializeType;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.types.RecordType;
import com.netsuite.suitetalk.proxy.v2017_2.platform.core.types.SearchRecordType;
import com.netsuite.suitetalk.proxy.v2017_2.platform.faults.InvalidCredentialsFault;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.ApplicationInfo;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.AsyncResult;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.Preferences;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.ReadResponse;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.ReadResponseList;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.SearchPreferences;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.SessionResponse;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.WriteResponse;
import com.netsuite.suitetalk.proxy.v2017_2.platform.messages.WriteResponseList;
import org.apache.axis.Message;
import org.apache.axis.client.Call;
import org.apache.axis.message.SOAPHeaderElement;
import org.apache.axis.soap.MessageFactoryImpl;
import org.apache.commons.httpclient.HttpVersion;
import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;

import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.xml.rpc.ServiceException;
import javax.xml.soap.MimeHeader;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.netsuite.suitetalk.client.common.Constants.*;
import static com.netsuite.suitetalk.client.common.utils.CommonUtils.getCookieWithoutSessionId;
import static com.netsuite.suitetalk.client.common.utils.CommonUtils.isEmptyString;
import static com.netsuite.suitetalk.client.common.utils.CommonUtils.parseSessionIdFromCookie;
import static com.netsuite.suitetalk.client.v2017_2.utils.Utils.*;
@ParametersAreNonnullByDefault
public class WsClient extends WsCoreClient implements WebServicesSoapClient
{
    private static final Logger LOG;
    private String sessionId;
    private String applicationId;
    private String lastSearchJobId;
    private String lastGetPostingTransactionSummaryJobId;
    private Preferences preferences;
    private SearchPreferences searchPreferences;
    
    public WsClient(final URL url) {
        super(url);
        this.setHttpProtocolVersion(HttpVersion.HTTP_1_0);
    }
    
    public WsClient(final Passport passport, final URL url) {
        this(url);
        this.setPassport(passport);
    }
    
    public WsClient(final SsoPassport ssoPassport, final URL url) {
        this(url);
        this.setSsoPassport(ssoPassport);
    }
    
    public WsClient(final TokenPassport tokenPassport, final URL url) {
        this(url);
        this.setTokenPassport(tokenPassport);
    }
    
    public WsClient(final OAuthPassport oAuthPassport, final URL url) {
        this(url);
        this.setOAuthPassport(oAuthPassport);
    }
    
    protected Preferences getPreferences() {
        if (this.preferences == null) {
            this.preferences = new Preferences();
        }
        if (!this.isSoapHeaderSet("preferences")) {
            this.addSoapHeader("preferences", this.preferences);
        }
        return this.preferences;
    }
    
    protected SearchPreferences getSearchPreferences() {
        if (this.searchPreferences == null) {
            this.searchPreferences = new SearchPreferences();
        }
        if (!this.isSoapHeaderSet("searchPreferences")) {
            this.addSoapHeader("searchPreferences", this.searchPreferences);
        }
        return this.searchPreferences;
    }
    
    public void setIgnoreReadOnlyFields(final boolean ignoreReadOnlyFields) {
        this.getPreferences().setIgnoreReadOnlyFields(ignoreReadOnlyFields);
    }
    
    public void setWarningAsError(final boolean warningAsError) {
        this.getPreferences().setWarningAsError(warningAsError);
    }
    
    public void setDisableMandatoryCustomFieldValidation(final boolean disableValidation) {
        this.getPreferences().setDisableMandatoryCustomFieldValidation(disableValidation);
    }
    
    public void setDisableSystemNotesForCustomFields(final boolean disableSystemNotes) {
        this.getPreferences().setDisableSystemNotesForCustomFields(disableSystemNotes);
    }
    
    public void setRunServerSuiteScriptAndWorkflowTriggers(final boolean runServerSuiteScriptAndWorkflowTriggers) {
        this.getPreferences().setRunServerSuiteScriptAndTriggerWorkflows(runServerSuiteScriptAndWorkflowTriggers);
    }
    
    public void setBodyFieldsOnly(final boolean bodyFieldsOnly) {
        this.getSearchPreferences().setBodyFieldsOnly(bodyFieldsOnly);
    }
    
    public void setPageSize(final int pageSize) {
        this.getSearchPreferences().setPageSize(pageSize);
    }
    
    public void setReturnSearchColumns(final boolean returnSearchColumns) {
        this.getSearchPreferences().setReturnSearchColumns(returnSearchColumns);
    }
    
    public void setSearchPreferences(final boolean bodyFieldsOnly, final int pageSize, final boolean returnSearchColumns) {
        this.setBodyFieldsOnly(bodyFieldsOnly);
        this.setPageSize(pageSize);
        this.setReturnSearchColumns(returnSearchColumns);
    }
    
    public String getApplicationId() {
        return this.applicationId;
    }
    
    public void setApplicationId(final String applicationId) {
        if (applicationId == null || applicationId.equals(this.getApplicationId())) {
            return;
        }
        this.applicationId = applicationId;
        final ApplicationInfo applicationInfo = new ApplicationInfo();
        applicationInfo.setApplicationId(applicationId);
        this.replaceSoapHeader("applicationInfo", applicationInfo);
    }
    
    public void unsetApplicationId() {
        this.applicationId = null;
        this.removeSoapHeader("applicationInfo");
    }
    
    public String getSessionId() {
        return this.sessionId;
    }
    
    public void setSessionId(final String sessionId) {
        this.sessionId = sessionId;
        this.setAutomaticSessionManagement(false);
        this.setHttpHeader("Cookie", "JSESSIONID=" + sessionId);
    }
    
    public void unsetSessionId() {
        this.sessionId = null;
        this.removeSessionIdFromRequestHeaders();
        this.setAutomaticSessionManagement(true);
    }
    
    protected void removeSessionIdFromRequestHeaders() {
        MimeHeader sessionCookie = null;
        for (final MimeHeader header : this.requestHttpHeaders) {
            if ("Cookie".equals(header.getName()) && header.getValue().contains("JSESSIONID")) {
                sessionCookie = header;
                break;
            }
        }
        if (sessionCookie != null) {
            final int index = this.requestHttpHeaders.indexOf(sessionCookie);
            this.requestHttpHeaders.remove(sessionCookie);
            final String cookieWithoutSessionId = CommonUtils.getCookieWithoutSessionId(sessionCookie.getValue());
            if (!cookieWithoutSessionId.isEmpty()) {
                this.requestHttpHeaders.add(index, new MimeHeader(sessionCookie.getName(), cookieWithoutSessionId));
            }
        }
    }
    
    public String getLastJobId() {
        try {
            final Call call = this.getStub()._getCall();
            final Message message = call.getResponseMessage();
            final SOAPHeader soapHeader = message.getSOAPHeader();
            final SOAPHeaderElement documentInfo = (SOAPHeaderElement)soapHeader.getElementsByTagName("documentInfo").item(0);
            final SOAPElement jobId = (SOAPElement)documentInfo.getElementsByTagName("nsId").item(0);
            return jobId.getValue();
        }
        catch (SOAPException | NullPointerException ex2) {
            final Exception ex;
            final Exception e = ex;
            return null;
        }
    }
    
    public SessionResponse callLogin(final Passport passport) throws RemoteException {
        final com.netsuite.suitetalk.proxy.v2017_2.platform.core.Passport endpointSpecificPassport = Utils.convertPassport(passport);
        final SessionResponse sessionResponse;
        synchronized (this) {
            sessionResponse = this.getPort().login(endpointSpecificPassport);
        }
        this.saveSessionId(sessionResponse);
        return sessionResponse;
    }
    
    public SessionResponse callLogin() throws RemoteException {
        final Passport passport = this.getPassport();
        if (passport == null) {
            throw new IllegalStateException("Passport must be set before invoking login operation.");
        }
        return this.callLogin(passport);
    }
    
    public boolean login(final Passport passport) {
        SessionResponse sessionResponse;
        try {
            sessionResponse = this.callLogin(passport);
        }
        catch (RemoteException e) {
            WsClient.LOG.warn((Object)"Login failed", (Throwable)e);
            return false;
        }
        return sessionResponse.getStatus().isIsSuccess();
    }
    
    public boolean login() {
        final Passport passport = this.getPassport();
        if (passport == null) {
            throw new IllegalStateException("Passport must be set before invoking login operation.");
        }
        return this.login(passport);
    }
    
    private void saveSessionId(final SessionResponse sessionResponse) {
        if (sessionResponse.getStatus().isIsSuccess()) {
            final List<String> cookiesWithSession = this.getResponseHttpHeader("Set-Cookie").stream().filter(cookie -> cookie.contains("JSESSIONID")).collect((Collector<? super Object, ?, List<String>>)Collectors.toList());
            if (cookiesWithSession.isEmpty()) {
                this.sessionId = null;
            }
            else {
                this.sessionId = CommonUtils.parseSessionIdFromCookie((String)cookiesWithSession.get(0));
            }
        }
    }
    
    public SessionResponse callLogout() throws RemoteException {
        final SessionResponse sessionResponse;
        synchronized (this) {
            sessionResponse = this.getPort().logout();
        }
        this.clearSessionId(sessionResponse);
        return sessionResponse;
    }
    
    public boolean logout() {
        SessionResponse sessionResponse;
        try {
            sessionResponse = this.callLogout();
        }
        catch (RemoteException e) {
            WsClient.LOG.warn((Object)"Logout failed", (Throwable)e);
            return false;
        }
        return sessionResponse.getStatus().isIsSuccess();
    }
    
    private void clearSessionId(final SessionResponse sessionResponse) {
        if (sessionResponse.getStatus().isIsSuccess()) {
            this.sessionId = null;
        }
    }
    
    public SessionResponse callMapSso(final Passport netsuitePassport, final SsoPassport thirdPartyPassport) throws RemoteException {
        final SsoCredentials ssoCredentials = new SsoCredentials();
        ssoCredentials.setEmail(netsuitePassport.getEmail());
        ssoCredentials.setPassword(netsuitePassport.getPassword());
        ssoCredentials.setAccount(netsuitePassport.getAccount());
        ssoCredentials.setRole(Utils.createRecordRef(netsuitePassport.getRole()));
        ssoCredentials.setAuthenticationToken(thirdPartyPassport.getAuthenticationToken());
        ssoCredentials.setPartnerId(thirdPartyPassport.getPartnerId());
        final SessionResponse sessionResponse;
        synchronized (this) {
            sessionResponse = this.getPort().mapSso(ssoCredentials);
        }
        this.saveSessionId(sessionResponse);
        return sessionResponse;
    }
    
    public boolean mapSso(final Passport netsuitePassport, final SsoPassport thirdPartyPassport) throws RemoteException {
        SessionResponse sessionResponse;
        try {
            sessionResponse = this.callMapSso(netsuitePassport, thirdPartyPassport);
        }
        catch (RemoteException e) {
            WsClient.LOG.warn((Object)"SSO mapping failed", (Throwable)e);
            return false;
        }
        return sessionResponse.getStatus().isIsSuccess();
    }
    
    public SessionResponse callSsoLogin(final SsoPassport ssoPassport) throws RemoteException {
        final com.netsuite.suitetalk.proxy.v2017_2.platform.core.SsoPassport endpointSsoPassport = Utils.convertSsoPassport(ssoPassport);
        final SessionResponse sessionResponse;
        synchronized (this) {
            sessionResponse = this.getPort().ssoLogin(endpointSsoPassport);
        }
        this.saveSessionId(sessionResponse);
        return sessionResponse;
    }
    
    public boolean ssoLogin(final SsoPassport ssoPassport) throws RemoteException {
        SessionResponse sessionResponse;
        try {
            sessionResponse = this.callSsoLogin(ssoPassport);
        }
        catch (RemoteException e) {
            WsClient.LOG.warn((Object)"SSO login failed", (Throwable)e);
            return false;
        }
        return sessionResponse.getStatus().isIsSuccess();
    }
    
    public synchronized WriteResponse callAddRecord(final Record record) throws RemoteException {
        return this.getPort().add(record);
    }
    
    public String addRecord(final Record record) throws RemoteException {
        final WriteResponse writeResponse = this.callAddRecord(record);
        if (writeResponse.getStatus().isIsSuccess()) {
            return Utils.getInternalId(writeResponse.getBaseRef());
        }
        return null;
    }
    
    public synchronized WriteResponseList callAddRecords(final Record... records) throws RemoteException {
        return this.getPort().addList(records);
    }
    
    public WriteResponseList callAddRecords(final List<? extends Record> records) throws RemoteException {
        return this.callAddRecords((Record[])records.toArray(new Record[records.size()]));
    }
    
    public List<String> addRecords(final Record... records) throws RemoteException {
        return Utils.getInternalIds(this.callAddRecords(records));
    }
    
    public List<String> addRecords(final List<? extends Record> records) throws RemoteException {
        return this.addRecords((Record[])records.toArray(new Record[records.size()]));
    }
    
    public synchronized WriteResponse callUpdateRecord(final Record record) throws RemoteException {
        return this.getPort().update(record);
    }
    
    public String updateRecord(final Record record) throws RemoteException {
        final WriteResponse writeResponse = this.callUpdateRecord(record);
        if (writeResponse.getStatus().isIsSuccess()) {
            return Utils.getInternalId(writeResponse.getBaseRef());
        }
        return null;
    }
    
    public synchronized WriteResponseList callUpdateRecords(final Record... records) throws RemoteException {
        return this.getPort().updateList(records);
    }
    
    public WriteResponseList callUpdateRecords(final List<? extends Record> records) throws RemoteException {
        return this.callUpdateRecords((Record[])records.toArray(new Record[records.size()]));
    }
    
    public List<String> updateRecords(final Record... records) throws RemoteException {
        return Utils.getInternalIds(this.callUpdateRecords(records));
    }
    
    public List<String> updateRecords(final List<? extends Record> records) throws RemoteException {
        return this.updateRecords((Record[])records.toArray(new Record[records.size()]));
    }
    
    public synchronized WriteResponse callUpsertRecord(final Record record) throws RemoteException {
        return this.getPort().upsert(record);
    }
    
    public String upsertRecord(final Record record) throws RemoteException {
        final WriteResponse writeResponse = this.callUpsertRecord(record);
        if (writeResponse.getStatus().isIsSuccess()) {
            return Utils.getInternalId(writeResponse.getBaseRef());
        }
        return null;
    }
    
    public synchronized WriteResponseList callUpsertRecords(final Record... records) throws RemoteException {
        return this.getPort().upsertList(records);
    }
    
    public WriteResponseList callUpsertRecords(final List<? extends Record> records) throws RemoteException {
        return this.callUpsertRecords((Record[])records.toArray(new Record[records.size()]));
    }
    
    public List<String> upsertRecords(final Record... records) throws RemoteException {
        return Utils.getInternalIds(this.callUpsertRecords(records));
    }
    
    public List<String> upsertRecords(final List<? extends Record> records) throws RemoteException {
        return this.upsertRecords((Record[])records.toArray(new Record[records.size()]));
    }
    
    public synchronized ReadResponse callGetRecord(final BaseRef baseRef) throws RemoteException {
        return this.getPort().get(baseRef);
    }
    
    public ReadResponse callGetRecord(final String internalId, final RecordType recordType) throws RemoteException {
        return this.callGetRecord((BaseRef)Utils.createRecordRef(internalId, recordType));
    }
    
    public Record getRecord(final BaseRef baseRef) throws RemoteException {
        return this.callGetRecord(baseRef).getRecord();
    }
    
    public Record getRecord(final String internalId, final RecordType recordType) throws RemoteException {
        return this.getRecord((BaseRef)Utils.createRecordRef(internalId, recordType));
    }
    
    public ReadResponse callGetRecordByExternalId(final String externalId, final RecordType recordType) throws RemoteException {
        return this.callGetRecord((BaseRef)Utils.createRecordRefWithExternalId(externalId, recordType));
    }
    
    public Record getRecordByExternalId(final String externalId, final RecordType recordType) throws RemoteException {
        return this.callGetRecordByExternalId(externalId, recordType).getRecord();
    }
    
    public synchronized ReadResponseList callGetRecords(final BaseRef... baseRefs) throws RemoteException {
        return this.getPort().getList(baseRefs);
    }
    
    public ReadResponseList callGetRecords(final List<? extends BaseRef> refs) throws RemoteException {
        return this.callGetRecords((BaseRef[])refs.toArray(new BaseRef[refs.size()]));
    }
    
    public List<Record> getRecords(final BaseRef... baseRefs) throws RemoteException {
        return Utils.getRecords(this.callGetRecords(baseRefs));
    }
    
    public List<Record> getRecords(final List<? extends BaseRef> refs) throws RemoteException {
        return this.getRecords((BaseRef[])refs.toArray(new BaseRef[refs.size()]));
    }
    
    public synchronized WriteResponse callDeleteRecord(final BaseRef deleteRecordReference, @Nullable final DeletionReason deletionReason) throws RemoteException {
        return this.getPort().delete(deleteRecordReference, deletionReason);
    }
    
    public WriteResponse callDeleteRecord(final String internalId, final RecordType recordType, @Nullable final RecordRef deletionReasonCode, @Nullable final String deletionReasonMemo) throws RemoteException {
        return this.callDeleteRecord((BaseRef)Utils.createRecordRef(internalId, recordType), this.getDeletionReason(deletionReasonCode, deletionReasonMemo));
    }
    
    public WriteResponse callDeleteRecord(final String internalId, final RecordType recordType) throws RemoteException {
        return this.callDeleteRecord((BaseRef)Utils.createRecordRef(internalId, recordType), null);
    }
    
    public WriteResponse callDeleteRecordByExternalId(final String externalId, final RecordType recordType) throws RemoteException {
        return this.callDeleteRecord((BaseRef)Utils.createRecordRefWithExternalId(externalId, recordType), null);
    }
    
    public WriteResponse callDeleteRecordByExternalId(final String externalId, final RecordType recordType, @Nullable final RecordRef deletionReasonCode, @Nullable final String deletionReasonMemo) throws RemoteException {
        return this.callDeleteRecord((BaseRef)Utils.createRecordRefWithExternalId(externalId, recordType), this.getDeletionReason(deletionReasonCode, deletionReasonMemo));
    }
    
    public boolean deleteRecord(final BaseRef baseRef, @Nullable final DeletionReason deletionReason) throws RemoteException {
        return this.callDeleteRecord(baseRef, deletionReason).getStatus().isIsSuccess();
    }
    
    public boolean deleteRecord(final String internalId, final RecordType recordType, @Nullable final RecordRef deletionReasonCode, @Nullable final String deletionReasonMemo) throws RemoteException {
        return this.deleteRecord((BaseRef)Utils.createRecordRef(internalId, recordType), this.getDeletionReason(deletionReasonCode, deletionReasonMemo));
    }
    
    public boolean deleteRecord(final String internalId, final RecordType recordType) throws RemoteException {
        return this.deleteRecord((BaseRef)Utils.createRecordRef(internalId, recordType), null);
    }
    
    public boolean deleteRecordByExternalId(final String externalId, final RecordType recordType, @Nullable final RecordRef deletionReasonCode, @Nullable final String deletionReasonMemo) throws RemoteException {
        return this.deleteRecord((BaseRef)Utils.createRecordRefWithExternalId(externalId, recordType), this.getDeletionReason(deletionReasonCode, deletionReasonMemo));
    }
    
    public boolean deleteRecordByExternalId(final String externalId, final RecordType recordType) throws RemoteException {
        return this.deleteRecord((BaseRef)Utils.createRecordRefWithExternalId(externalId, recordType), null);
    }
    
    private DeletionReason getDeletionReason(@Nullable final RecordRef deletionReasonCode, @Nullable final String deletionMemo) {
        if (deletionReasonCode == null && deletionMemo == null) {
            return null;
        }
        final DeletionReason deletionReason = new DeletionReason();
        deletionReason.setDeletionReasonCode(deletionReasonCode);
        deletionReason.setDeletionReasonMemo(deletionMemo);
        return deletionReason;
    }
    
    public synchronized WriteResponseList callDeleteRecords(@Nullable final DeletionReason deletionReason, final BaseRef... baseRefs) throws RemoteException {
        return this.getPort().deleteList(baseRefs, deletionReason);
    }
    
    public WriteResponseList callDeleteRecords(final BaseRef... baseRefs) throws RemoteException {
        return this.callDeleteRecords((DeletionReason)null, baseRefs);
    }
    
    public WriteResponseList callDeleteRecords(@Nullable final DeletionReason deletionReason, final List<? extends BaseRef> baseRefs) throws RemoteException {
        return this.callDeleteRecords(deletionReason, (BaseRef[])baseRefs.toArray(new BaseRef[baseRefs.size()]));
    }
    
    public WriteResponseList callDeleteRecords(final List<? extends BaseRef> baseRefs) throws RemoteException {
        return this.callDeleteRecords(null, baseRefs);
    }
    
    public List<Boolean> deleteRecords(@Nullable final DeletionReason deletionReason, final BaseRef... baseRefs) throws RemoteException {
        return Utils.getSuccess(this.callDeleteRecords(deletionReason, baseRefs));
    }
    
    public List<Boolean> deleteRecords(final BaseRef... baseRefs) throws RemoteException {
        return Utils.getSuccess(this.callDeleteRecords(baseRefs));
    }
    
    public List<Boolean> deleteRecords(@Nullable final DeletionReason deletionReason, final List<? extends BaseRef> baseRefs) throws RemoteException {
        return this.deleteRecords(deletionReason, (BaseRef[])baseRefs.toArray(new BaseRef[baseRefs.size()]));
    }
    
    public List<Boolean> deleteRecords(final List<? extends BaseRef> baseRefs) throws RemoteException {
        return this.deleteRecords(null, baseRefs);
    }
    
    public synchronized GetDeletedResult callGetDeletedRecords(final GetDeletedFilter getDeletedFilter, final int pageIndex) throws RemoteException {
        return this.getPort().getDeleted(getDeletedFilter, pageIndex);
    }
    
    public List<DeletedRecord> getDeletedRecords(final GetDeletedFilter getDeletedFilter, final int pageIndex) throws RemoteException {
        final GetDeletedResult getDeletedResult = this.callGetDeletedRecords(getDeletedFilter, pageIndex);
        if (!getDeletedResult.getStatus().isIsSuccess()) {
            return null;
        }
        final DeletedRecord[] deletedRecords = getDeletedResult.getDeletedRecordList().getDeletedRecord();
        if (deletedRecords == null || deletedRecords.length == 0) {
            return Collections.emptyList();
        }
        return Arrays.asList(deletedRecords);
    }
    
    public synchronized GetAllResult callGetAllRecords(final GetAllRecordType getAllRecordType) throws RemoteException {
        return this.getPort().getAll(new GetAllRecord(getAllRecordType));
    }
    
    public List<Record> getAllRecords(final GetAllRecordType getAllRecordType) throws RemoteException {
        final GetAllResult getAllResult = this.callGetAllRecords(getAllRecordType);
        if (!getAllResult.getStatus().isIsSuccess()) {
            return null;
        }
        final Record[] allRecords = getAllResult.getRecordList().getRecord();
        if (allRecords == null || allRecords.length == 0) {
            return Collections.emptyList();
        }
        return Arrays.asList(allRecords);
    }
    
    public synchronized ReadResponse callInitialize(final InitializeRecord initializeRecord) throws RemoteException {
        return this.getPort().initialize(initializeRecord);
    }
    
    public ReadResponse callInitialize(final InitializeRef reference, final InitializeType type) throws RemoteException {
        final InitializeRecord initializeRecord = new InitializeRecord();
        initializeRecord.setReference(reference);
        initializeRecord.setType(type);
        return this.callInitialize(initializeRecord);
    }
    
    public Record initialize(final InitializeRecord initializeRecord) throws RemoteException {
        return this.callInitialize(initializeRecord).getRecord();
    }
    
    public Record initialize(final InitializeRef reference, final InitializeType type) throws RemoteException {
        final InitializeRecord initializeRecord = new InitializeRecord();
        initializeRecord.setReference(reference);
        initializeRecord.setType(type);
        return this.initialize(initializeRecord);
    }
    
    public synchronized ReadResponseList callInitializeList(final InitializeRecord... initializeRecords) throws RemoteException {
        return this.getPort().initializeList(initializeRecords);
    }
    
    public ReadResponseList callInitializeList(final List<? extends InitializeRecord> initializeRecords) throws RemoteException {
        return this.callInitializeList((InitializeRecord[])initializeRecords.toArray(new InitializeRecord[initializeRecords.size()]));
    }
    
    public List<Record> initializeList(final InitializeRecord... initializeRecords) throws RemoteException {
        final ReadResponseList readResponseList = this.callInitializeList(initializeRecords);
        final ReadResponse[] readResponses = readResponseList.getReadResponse();
        if (readResponses == null) {
            return null;
        }
        return Arrays.stream(readResponses).map((Function<? super ReadResponse, ?>)ReadResponse::getRecord).collect((Collector<? super Object, ?, List<Record>>)Collectors.toList());
    }
    
    public List<Record> initializeList(final List<? extends InitializeRecord> initializeRecords) throws RemoteException {
        return this.initializeList((InitializeRecord[])initializeRecords.toArray(new InitializeRecord[initializeRecords.size()]));
    }
    
    public SearchResult callSearch(final SearchRecord searchRecord) throws RemoteException {
        final SearchResult searchResult;
        synchronized (this) {
            searchResult = this.getPort().search(searchRecord);
        }
        this.lastSearchJobId = this.getLastJobId();
        return searchResult;
    }
    
    public List<?> search(final SearchRecord searchRecord) throws RemoteException {
        final SearchResult searchResult = this.callSearch(searchRecord);
        return Utils.getSearchResults(searchResult);
    }
    
    public synchronized SearchResult callSearchMore(final int pageIndex) throws RemoteException {
        return this.getPort().searchMore(pageIndex);
    }
    
    public List<?> searchMore(final int pageIndex) throws RemoteException {
        return Utils.getSearchResults(this.callSearchMore(pageIndex));
    }
    
    public synchronized SearchResult callSearchNext() throws RemoteException {
        return this.getPort().searchNext();
    }
    
    public List<?> searchNext() throws RemoteException {
        return Utils.getSearchResults(this.callSearchNext());
    }
    
    public SearchResult callSearchMoreWithId(final int pageIndex) throws RemoteException {
        if (this.lastSearchJobId == null) {
            throw new IllegalStateException("Operation search has to be called before calling callSearchMoreWithId");
        }
        return this.callSearchMoreWithId(this.lastSearchJobId, pageIndex);
    }
    
    public List<?> searchMoreWithId(final int pageIndex) throws RemoteException {
        return Utils.getSearchResults(this.callSearchMoreWithId(pageIndex));
    }
    
    public synchronized SearchResult callSearchMoreWithId(final String jobId, final int pageIndex) throws RemoteException {
        return this.getPort().searchMoreWithId(jobId, pageIndex);
    }
    
    public List<?> searchMoreWithId(final String jobId, final int pageIndex) throws RemoteException {
        return Utils.getSearchResults(this.callSearchMoreWithId(jobId, pageIndex));
    }
    
    public List<?> searchAll(final SearchRecord searchRecord) throws RemoteException {
        final SearchResult searchResult = this.callSearch(searchRecord);
        final List<?> firstPageResults = Utils.getSearchResults(searchResult);
        if (firstPageResults == null) {
            return null;
        }
        if (firstPageResults.isEmpty()) {
            return firstPageResults;
        }
        final List<Object> foundRecords = new ArrayList<Object>(searchResult.getTotalRecords());
        foundRecords.addAll(firstPageResults);
        final int totalPages = searchResult.getTotalPages();
        final String searchId = searchResult.getSearchId();
        for (int pageIndex = 2; pageIndex <= totalPages; ++pageIndex) {
            final SearchResult searchMoreResult = this.callSearchMoreWithId(searchId, pageIndex);
            final List<?> otherPageResults = Utils.getSearchResults(searchMoreResult);
            if (otherPageResults == null) {
                return null;
            }
            foundRecords.addAll(otherPageResults);
        }
        return foundRecords;
    }
    
    public synchronized AsyncStatusResult callAsyncAddList(final Record... records) throws RemoteException {
        return this.getPort().asyncAddList(records);
    }
    
    public AsyncStatusResult callAsyncAddList(final List<? extends Record> records) throws RemoteException {
        return this.callAsyncAddList((Record[])records.toArray(new Record[records.size()]));
    }
    
    public String asyncAddList(final Record... records) throws RemoteException {
        return this.callAsyncAddList(records).getJobId();
    }
    
    public String asyncAddList(final List<? extends Record> records) throws RemoteException {
        return this.asyncAddList((Record[])records.toArray(new Record[records.size()]));
    }
    
    public synchronized AsyncStatusResult callAsyncGetList(final BaseRef... refs) throws RemoteException {
        return this.getPort().asyncGetList(refs);
    }
    
    public AsyncStatusResult callAsyncGetList(final List<? extends BaseRef> refs) throws RemoteException {
        return this.callAsyncGetList((BaseRef[])refs.toArray(new BaseRef[refs.size()]));
    }
    
    public String asyncGetList(final BaseRef... refs) throws RemoteException {
        return this.callAsyncGetList(refs).getJobId();
    }
    
    public String asyncGetList(final List<? extends BaseRef> refs) throws RemoteException {
        return this.asyncGetList((BaseRef[])refs.toArray(new BaseRef[refs.size()]));
    }
    
    public synchronized AsyncStatusResult callAsyncUpdateList(final Record... records) throws RemoteException {
        return this.getPort().asyncUpdateList(records);
    }
    
    public AsyncStatusResult callAsyncUpdateList(final List<? extends Record> records) throws RemoteException {
        return this.callAsyncUpdateList((Record[])records.toArray(new Record[records.size()]));
    }
    
    public String asyncUpdateList(final Record... records) throws RemoteException {
        return this.callAsyncUpdateList(records).getJobId();
    }
    
    public String asyncUpdateList(final List<? extends Record> records) throws RemoteException {
        return this.asyncUpdateList((Record[])records.toArray(new Record[records.size()]));
    }
    
    public synchronized AsyncStatusResult callAsyncUpsertList(final Record... records) throws RemoteException {
        return this.getPort().asyncUpsertList(records);
    }
    
    public AsyncStatusResult callAsyncUpsertList(final List<? extends Record> records) throws RemoteException {
        return this.callAsyncUpsertList((Record[])records.toArray(new Record[records.size()]));
    }
    
    public String asyncUpsertList(final Record... records) throws RemoteException {
        return this.callAsyncUpsertList(records).getJobId();
    }
    
    public String asyncUpsertList(final List<? extends Record> records) throws RemoteException {
        return this.asyncUpsertList((Record[])records.toArray(new Record[records.size()]));
    }
    
    public synchronized AsyncStatusResult callAsyncDeleteList(@Nullable final DeletionReason deletionReason, final BaseRef... refs) throws RemoteException {
        return this.getPort().asyncDeleteList(refs, deletionReason);
    }
    
    public AsyncStatusResult callAsyncDeleteList(final BaseRef... refs) throws RemoteException {
        return this.callAsyncDeleteList((DeletionReason)null, refs);
    }
    
    public AsyncStatusResult callAsyncDeleteList(@Nullable final DeletionReason deletionReason, final List<? extends BaseRef> refs) throws RemoteException {
        return this.callAsyncDeleteList(deletionReason, (BaseRef[])refs.toArray(new BaseRef[refs.size()]));
    }
    
    public AsyncStatusResult callAsyncDeleteList(final List<? extends BaseRef> refs) throws RemoteException {
        return this.callAsyncDeleteList(null, refs);
    }
    
    public String asyncDeleteList(final BaseRef... refs) throws RemoteException {
        return this.callAsyncDeleteList(refs).getJobId();
    }
    
    public String asyncDeleteList(final List<? extends BaseRef> refs) throws RemoteException {
        return this.asyncDeleteList((BaseRef[])refs.toArray(new BaseRef[refs.size()]));
    }
    
    public synchronized AsyncStatusResult callAsyncSearch(final SearchRecord searchRecord) throws RemoteException {
        return this.getPort().asyncSearch(searchRecord);
    }
    
    public String asyncSearch(final SearchRecord searchRecord) throws RemoteException {
        return this.callAsyncSearch(searchRecord).getJobId();
    }
    
    public synchronized AsyncStatusResult callAsyncInitializeList(final InitializeRecord... initializeRecords) throws RemoteException {
        return this.getPort().asyncInitializeList(initializeRecords);
    }
    
    public AsyncStatusResult callAsyncInitializeList(final List<? extends InitializeRecord> initializeRecords) throws RemoteException {
        return this.callAsyncInitializeList((InitializeRecord[])initializeRecords.toArray(new InitializeRecord[initializeRecords.size()]));
    }
    
    public String asyncInitializeList(final InitializeRecord... initializeRecords) throws RemoteException {
        return this.callAsyncInitializeList(initializeRecords).getJobId();
    }
    
    public String asyncInitializeList(final List<? extends InitializeRecord> initializeRecords) throws RemoteException {
        return this.asyncInitializeList((InitializeRecord[])initializeRecords.toArray(new InitializeRecord[initializeRecords.size()]));
    }
    
    public synchronized AsyncStatusResult callCheckAsyncStatus(final String jobId) throws RemoteException {
        return this.getPort().checkAsyncStatus(jobId);
    }
    
    public AsyncStatusType checkAsyncStatus(final String jobId) throws RemoteException {
        return this.callCheckAsyncStatus(jobId).getStatus();
    }
    
    public synchronized AsyncResult callGetAsyncResult(final String jobId, final int pageIndex) throws RemoteException {
        return this.getPort().getAsyncResult(jobId, pageIndex);
    }
    
    public AsyncResult getAsyncResult(final String jobId, final int pageIndex) throws RemoteException {
        return this.callGetAsyncResult(jobId, pageIndex);
    }
    
    public synchronized WriteResponse callAttach(final AttachReference attachReference) throws RemoteException {
        return this.getPort().attach(attachReference);
    }
    
    public WriteResponse callAttach(final BaseRef attachTo, final BaseRef attachedRecord) throws RemoteException {
        final AttachBasicReference attachReference = new AttachBasicReference();
        attachReference.setAttachTo(attachTo);
        attachReference.setAttachedRecord(attachedRecord);
        return this.callAttach((AttachReference)attachReference);
    }
    
    public boolean attach(final AttachReference attachReference) throws RemoteException {
        final WriteResponse writeResponse = this.callAttach(attachReference);
        return writeResponse.getStatus() != null && writeResponse.getStatus().isIsSuccess();
    }
    
    public boolean attach(final BaseRef attachTo, final BaseRef attachedRecord) throws RemoteException {
        final AttachBasicReference attachReference = new AttachBasicReference();
        attachReference.setAttachTo(attachTo);
        attachReference.setAttachedRecord(attachedRecord);
        return this.attach((AttachReference)attachReference);
    }
    
    public synchronized WriteResponse callDetach(final DetachReference detachReference) throws RemoteException {
        return this.getPort().detach(detachReference);
    }
    
    public WriteResponse callDetach(final BaseRef detachFrom, final BaseRef detachedRecord) throws RemoteException {
        final DetachBasicReference detachReference = new DetachBasicReference();
        detachReference.setDetachFrom(detachFrom);
        detachReference.setDetachedRecord(detachedRecord);
        return this.callDetach((DetachReference)detachReference);
    }
    
    public boolean detach(final DetachReference detachReference) throws RemoteException {
        final WriteResponse writeResponse = this.callDetach(detachReference);
        return writeResponse.getStatus() != null && writeResponse.getStatus().isIsSuccess();
    }
    
    public boolean detach(final BaseRef detachFrom, final BaseRef detachedRecord) throws RemoteException {
        final DetachBasicReference detachReference = new DetachBasicReference();
        detachReference.setDetachFrom(detachFrom);
        detachReference.setDetachedRecord(detachedRecord);
        return this.detach((DetachReference)detachReference);
    }
    
    public WriteResponse callAttachContact(final BaseRef attachTo, final RecordRef contact, final RecordRef contactRole) throws RemoteException {
        final AttachContactReference attachContactReference = new AttachContactReference();
        attachContactReference.setAttachTo(attachTo);
        attachContactReference.setContact(contact);
        attachContactReference.setContactRole(contactRole);
        return this.callAttach((AttachReference)attachContactReference);
    }
    
    public WriteResponse callAttachContact(final BaseRef attachTo, final RecordRef contact) throws RemoteException {
        return this.callAttachContact(attachTo, contact, null);
    }
    
    public boolean attachContact(final BaseRef attachTo, final RecordRef contact, final RecordRef contactRole) throws RemoteException {
        final WriteResponse writeResponse = this.callAttachContact(attachTo, contact, contactRole);
        return writeResponse.getStatus() != null && writeResponse.getStatus().isIsSuccess();
    }
    
    public boolean attachContact(final BaseRef attachTo, final RecordRef contact) throws RemoteException {
        return this.attachContact(attachTo, contact, null);
    }
    
    public synchronized GetServerTimeResult callGetServerTime() throws RemoteException {
        return this.getPort().getServerTime();
    }
    
    public Calendar getServerTime() throws RemoteException {
        final GetServerTimeResult serverTimeResult = this.callGetServerTime();
        if (serverTimeResult.getStatus().isIsSuccess()) {
            return serverTimeResult.getServerTime();
        }
        return null;
    }
    
    public synchronized GetDataCenterUrlsResult callGetDataCenterUrls(final String companyId) throws RemoteException {
        return this.getPort().getDataCenterUrls(companyId);
    }
    
    public DataCenterUrls getDataCenterUrls(final String companyId) throws RemoteException {
        final GetDataCenterUrlsResult dataCenterUrlsResult = this.callGetDataCenterUrls(companyId);
        if (dataCenterUrlsResult.getStatus().isIsSuccess()) {
            return dataCenterUrlsResult.getDataCenterUrls();
        }
        return null;
    }
    
    public synchronized SessionResponse callChangeEmail(final ChangeEmail changeEmail) throws RemoteException {
        return this.getPort().changeEmail(changeEmail);
    }
    
    public SessionResponse callChangeEmail(final String password, final String newEmail, final boolean justThisAccount) throws RemoteException {
        final ChangeEmail changeEmail = new ChangeEmail();
        changeEmail.setCurrentPassword(password);
        changeEmail.setNewEmail(newEmail);
        changeEmail.setNewEmail2(newEmail);
        changeEmail.setJustThisAccount(justThisAccount);
        return this.callChangeEmail(changeEmail);
    }
    
    public SessionResponse callChangeEmail(final String password, final String newEmail) throws RemoteException {
        return this.callChangeEmail(password, newEmail, true);
    }
    
    private boolean getSuccessFromSessionResponse(final SessionResponse sessionResponse) {
        return sessionResponse.getStatus() != null && sessionResponse.getStatus().isIsSuccess();
    }
    
    public boolean changeEmail(final ChangeEmail changeEmail) throws RemoteException {
        return this.getSuccessFromSessionResponse(this.callChangeEmail(changeEmail));
    }
    
    public boolean changeEmail(final String password, final String newEmail, final boolean justThisAccount) throws RemoteException {
        return this.getSuccessFromSessionResponse(this.callChangeEmail(password, newEmail, justThisAccount));
    }
    
    public boolean changeEmail(final String password, final String newEmail) throws RemoteException {
        return this.getSuccessFromSessionResponse(this.callChangeEmail(password, newEmail));
    }
    
    public synchronized SessionResponse callChangePassword(final ChangePassword changePassword) throws RemoteException {
        return this.getPort().changePassword(changePassword);
    }
    
    public SessionResponse callChangePassword(final String currentPassword, final String newPassword) throws RemoteException {
        final ChangePassword changePassword = new ChangePassword();
        changePassword.setCurrentPassword(currentPassword);
        changePassword.setNewPassword(newPassword);
        changePassword.setNewPassword2(newPassword);
        return this.callChangePassword(changePassword);
    }
    
    public boolean changePassword(final ChangePassword changePassword) throws RemoteException {
        return this.getSuccessFromSessionResponse(this.callChangePassword(changePassword));
    }
    
    public boolean changePassword(final String currentPassword, final String newPassword) throws RemoteException {
        return this.getSuccessFromSessionResponse(this.callChangePassword(currentPassword, newPassword));
    }
    
    public synchronized GetSelectValueResult callGetSelectValue(final GetSelectValueFieldDescription getSelectValueFieldDescription, final int pageIndex) throws RemoteException {
        return this.getPort().getSelectValue(getSelectValueFieldDescription, pageIndex);
    }
    
    public List<BaseRef> getSelectValue(final GetSelectValueFieldDescription getSelectValueFieldDescription, final int pageIndex) throws RemoteException {
        final GetSelectValueResult getSelectValueResult = this.callGetSelectValue(getSelectValueFieldDescription, pageIndex);
        if (!getSelectValueResult.getStatus().isIsSuccess()) {
            return null;
        }
        final BaseRefList baseRefList = getSelectValueResult.getBaseRefList();
        if (baseRefList == null) {
            return Collections.emptyList();
        }
        return Arrays.asList(baseRefList.getBaseRef());
    }
    
    public List<BaseRef> getSelectValue(final GetSelectValueFieldDescription getSelectValueFieldDescription) throws RemoteException {
        final List<BaseRef> allValues = new ArrayList<BaseRef>();
        int totalPages = 1;
        int currentPage = 0;
        while (++currentPage <= totalPages) {
            final GetSelectValueResult getSelectValueResult = this.callGetSelectValue(getSelectValueFieldDescription, currentPage);
            if (getSelectValueResult.getStatus() == null || !getSelectValueResult.getStatus().isIsSuccess()) {
                return null;
            }
            totalPages = getSelectValueResult.getTotalPages();
            final BaseRefList baseRefList = getSelectValueResult.getBaseRefList();
            if (baseRefList == null) {
                continue;
            }
            allValues.addAll(Arrays.asList(baseRefList.getBaseRef()));
        }
        return allValues;
    }
    
    public synchronized GetBudgetExchangeRateResult callGetBudgetExchangeRate(final BudgetExchangeRateFilter budgetExchangeRateFilter) throws RemoteException {
        return this.getPort().getBudgetExchangeRate(budgetExchangeRateFilter);
    }
    
    public List<BudgetExchangeRate> getBudgetExchangeRate(final RecordRef period, final RecordRef fromSubsidiary, final RecordRef toSubsidiary) throws RemoteException {
        final BudgetExchangeRateFilter budgetExchangeRateFilter = new BudgetExchangeRateFilter();
        budgetExchangeRateFilter.setPeriod(period);
        budgetExchangeRateFilter.setFromSubsidiary(fromSubsidiary);
        budgetExchangeRateFilter.setToSubsidiary(toSubsidiary);
        final GetBudgetExchangeRateResult getBudgetExchangeRateResult = this.callGetBudgetExchangeRate(budgetExchangeRateFilter);
        if (getBudgetExchangeRateResult.getStatus() == null || !getBudgetExchangeRateResult.getStatus().isIsSuccess()) {
            return null;
        }
        final BudgetExchangeRateList budgetExchangeRateList = getBudgetExchangeRateResult.getBudgetExchangeRateList();
        if (budgetExchangeRateList == null) {
            return Collections.emptyList();
        }
        return Arrays.asList(budgetExchangeRateList.getBudgetExchangeRate());
    }
    
    public synchronized GetCurrencyRateResult callGetCurrencyRate(final CurrencyRateFilter currencyRateFilter) throws RemoteException {
        return this.getPort().getCurrencyRate(currencyRateFilter);
    }
    
    public List<CurrencyRate> getCurrencyRate(final RecordRef baseCurrency, final RecordRef fromCurrency, final Calendar effectiveDate) throws RemoteException {
        final CurrencyRateFilter currencyRateFilter = new CurrencyRateFilter();
        currencyRateFilter.setBaseCurrency(baseCurrency);
        currencyRateFilter.setFromCurrency(fromCurrency);
        currencyRateFilter.setEffectiveDate(effectiveDate);
        final GetCurrencyRateResult currencyRateResult = this.callGetCurrencyRate(currencyRateFilter);
        if (currencyRateResult.getStatus() == null || !currencyRateResult.getStatus().isIsSuccess()) {
            return null;
        }
        final CurrencyRateList currencyRateList = currencyRateResult.getCurrencyRateList();
        if (currencyRateList == null) {
            return Collections.emptyList();
        }
        return Arrays.asList(currencyRateList.getCurrencyRate());
    }
    
    public synchronized GetCustomizationIdResult callGetCustomizationId(final CustomizationType customizationType, final boolean includeInactives) throws RemoteException {
        return this.getPort().getCustomizationId(customizationType, includeInactives);
    }
    
    public List<CustomizationRef> getCustomizationId(final GetCustomizationType customizationType, final boolean includeInactives) throws RemoteException {
        final GetCustomizationIdResult customizationIdResult = this.callGetCustomizationId(new CustomizationType(customizationType), includeInactives);
        if (customizationIdResult.getStatus() == null || !customizationIdResult.getStatus().isIsSuccess()) {
            return null;
        }
        final CustomizationRefList customizationRefList = customizationIdResult.getCustomizationRefList();
        if (customizationRefList == null) {
            return Collections.emptyList();
        }
        return Arrays.asList(customizationRefList.getCustomizationRef());
    }
    
    public synchronized GetItemAvailabilityResult callGetItemAvailability(final ItemAvailabilityFilter itemAvailabilityFilter) throws RemoteException {
        return this.getPort().getItemAvailability(itemAvailabilityFilter);
    }
    
    public List<ItemAvailability> getItemAvailability(final Calendar lastQtyAvailableChange, final RecordRef... itemsReferences) throws RemoteException {
        final ItemAvailabilityFilter itemAvailabilityFilter = new ItemAvailabilityFilter();
        itemAvailabilityFilter.setItem(new RecordRefList(itemsReferences));
        itemAvailabilityFilter.setLastQtyAvailableChange(lastQtyAvailableChange);
        final GetItemAvailabilityResult getItemAvailabilityResult = this.callGetItemAvailability(itemAvailabilityFilter);
        if (getItemAvailabilityResult.getStatus() == null || !getItemAvailabilityResult.getStatus().isIsSuccess()) {
            return null;
        }
        final ItemAvailabilityList itemAvailabilityList = getItemAvailabilityResult.getItemAvailabilityList();
        if (itemAvailabilityList == null) {
            return Collections.emptyList();
        }
        return Arrays.asList(itemAvailabilityList.getItemAvailability());
    }
    
    public synchronized GetPostingTransactionSummaryResult callGetPostingTransactionSummary(final PostingTransactionSummaryField postingTransactionSummaryField, final PostingTransactionSummaryFilter postingTransactionSummaryFilter, final int pageIndex, @Nullable final String operationId) throws RemoteException {
        return this.getPort().getPostingTransactionSummary(postingTransactionSummaryField, postingTransactionSummaryFilter, pageIndex, operationId);
    }
    
    public GetPostingTransactionSummaryResult getPostingTransactionSummary(final PostingTransactionSummaryField postingTransactionSummaryField, final PostingTransactionSummaryFilter postingTransactionSummaryFilter, final int pageIndex) throws RemoteException {
        final GetPostingTransactionSummaryResult postingTransactionSummaryResult = this.callGetPostingTransactionSummary(postingTransactionSummaryField, postingTransactionSummaryFilter, pageIndex, (pageIndex == 1) ? null : this.lastGetPostingTransactionSummaryJobId);
        if (pageIndex == 1) {
            this.lastGetPostingTransactionSummaryJobId = this.getLastJobId();
        }
        return postingTransactionSummaryResult;
    }
    
    public synchronized GetSavedSearchResult callGetSavedSearch(final GetSavedSearchRecord searchRecordType) throws RemoteException {
        return this.getPort().getSavedSearch(searchRecordType);
    }
    
    public List<RecordRef> getSavedSearch(final SearchRecordType searchRecordType) throws RemoteException {
        final GetSavedSearchRecord getSavedSearchRecord = new GetSavedSearchRecord();
        getSavedSearchRecord.setSearchType(searchRecordType);
        final GetSavedSearchResult getSavedSearchResult = this.callGetSavedSearch(getSavedSearchRecord);
        if (getSavedSearchResult.getStatus() == null || !getSavedSearchResult.getStatus().isIsSuccess()) {
            return null;
        }
        final RecordRefList recordRefList = getSavedSearchResult.getRecordRefList();
        if (recordRefList == null || recordRefList.getRecordRef() == null) {
            return Collections.emptyList();
        }
        return Arrays.asList(recordRefList.getRecordRef());
    }
    
    public WriteResponse callUpdateInviteeStatus(final String eventInternalId, final CalendarEventAttendeeResponse response) throws RemoteException {
        final UpdateInviteeStatusReference updateInviteeStatusReference = new UpdateInviteeStatusReference();
        updateInviteeStatusReference.setEventId(Utils.createRecordRef(eventInternalId));
        updateInviteeStatusReference.setResponseCode(response);
        synchronized (this) {
            return this.getPort().updateInviteeStatus(updateInviteeStatusReference);
        }
    }
    
    public RecordRef updateInviteeStatus(final String eventInternalId, final CalendarEventAttendeeResponse response) throws RemoteException {
        final WriteResponse writeResponse = this.callUpdateInviteeStatus(eventInternalId, response);
        if (writeResponse.getStatus() != null && writeResponse.getStatus().isIsSuccess()) {
            return (RecordRef)writeResponse.getBaseRef();
        }
        return null;
    }
    
    public synchronized WriteResponseList callUpdateInviteeStatusList(final UpdateInviteeStatusReference... updateInviteeStatusReferences) throws RemoteException {
        return this.getPort().updateInviteeStatusList(updateInviteeStatusReferences);
    }
    
    public WriteResponseList callUpdateInviteeStatusList(final List<UpdateInviteeStatusReference> updateInviteeStatusReferences) throws RemoteException {
        return this.callUpdateInviteeStatusList((UpdateInviteeStatusReference[])updateInviteeStatusReferences.toArray(new UpdateInviteeStatusReference[updateInviteeStatusReferences.size()]));
    }
    
    public List<RecordRef> updateInviteeStatusList(final UpdateInviteeStatusReference... updateInviteeStatusReferences) throws RemoteException {
        final WriteResponseList writeResponseList = this.callUpdateInviteeStatusList(updateInviteeStatusReferences);
        return this.getUpdatedEventsFromResponseList(writeResponseList);
    }
    
    public List<RecordRef> updateInviteeStatusList(final List<UpdateInviteeStatusReference> updateInviteeStatusReferences) throws RemoteException {
        return this.updateInviteeStatusList((UpdateInviteeStatusReference[])updateInviteeStatusReferences.toArray(new UpdateInviteeStatusReference[updateInviteeStatusReferences.size()]));
    }
    
    public WriteResponseList callUpdateInviteeStatusList(final Map<String, CalendarEventAttendeeResponse> statusUpdates) throws RemoteException {
        final UpdateInviteeStatusReference updateInviteeStatusReference;
        return this.callUpdateInviteeStatusList((UpdateInviteeStatusReference[])statusUpdates.entrySet().stream().map(entry -> {
            updateInviteeStatusReference = new UpdateInviteeStatusReference();
            updateInviteeStatusReference.setEventId(Utils.createRecordRef(entry.getKey()));
            updateInviteeStatusReference.setResponseCode((CalendarEventAttendeeResponse)entry.getValue());
            return updateInviteeStatusReference;
        }).toArray(UpdateInviteeStatusReference[]::new));
    }
    
    public List<RecordRef> updateInviteeStatusList(final Map<String, CalendarEventAttendeeResponse> statusUpdates) throws RemoteException {
        final WriteResponseList writeResponseList = this.callUpdateInviteeStatusList(statusUpdates);
        return this.getUpdatedEventsFromResponseList(writeResponseList);
    }
    
    private List<RecordRef> getUpdatedEventsFromResponseList(final WriteResponseList writeResponseList) {
        return Arrays.stream(writeResponseList.getWriteResponse()).map(writeResponse -> writeResponse.getStatus().isIsSuccess() ? ((RecordRef)writeResponse.getBaseRef()) : null).collect((Collector<? super Object, ?, List<RecordRef>>)Collectors.toList());
    }
    
    public SOAPEnvelope sendSoapMessage(final String soapAction, final String soapMessage, final Charset soapMessageEncoding) {
        try {
            final MimeHeaders httpHeaders = new MimeHeaders();
            final SOAPMessage message = new MessageFactoryImpl().createMessage((javax.xml.soap.MimeHeaders)httpHeaders, (InputStream)new ByteArrayInputStream(soapMessage.getBytes(soapMessageEncoding)));
            final Call call = (Call)this.getLocator().createCall();
            call.setTargetEndpointAddress(this.getEndpointUrl());
            call.setSOAPActionURI(soapAction);
            return (SOAPEnvelope)call.invoke((Message)message);
        }
        catch (SOAPException | ServiceException | IOException ex2) {
            final Exception ex;
            final Exception e = ex;
            throw new RuntimeException(e);
        }
    }
    
    public SOAPEnvelope sendSoapMessage(final String soapAction, final String soapMessage) {
        return this.sendSoapMessage(soapAction, soapMessage, Charset.forName("UTF-8"));
    }
    
    public SOAPEnvelope sendSoapMessage(final String soapMessage) {
        String soapAction = null;
        try {
            final XPath xPath = XPathFactory.newInstance().newXPath();
            soapAction = ((Node)xPath.evaluate("/*[local-name()='Envelope']/*[local-name()='Body']/*[1]", new InputSource(new StringReader(soapMessage)), XPathConstants.NODE)).getLocalName();
            if (CommonUtils.isEmptyString(soapAction)) {
                throw new IllegalStateException("SOAPAction cannot be determined from provided soapMessage. Please check if Body element contains the correct child element.");
            }
        }
        catch (XPathExpressionException e) {
            e.printStackTrace();
        }
        return this.sendSoapMessage(soapAction, soapMessage);
    }
    
    static {
        LOG = Logger.getLogger((Class)WsClient.class);
    }
}
