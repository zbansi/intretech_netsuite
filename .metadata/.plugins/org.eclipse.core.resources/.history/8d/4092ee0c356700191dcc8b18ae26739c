package com.netsuite.suitetalk.client.v2017_2.utils;

import com.netsuite.webservices.platform.core_2019_1.BaseRef;
import com.netsuite.webservices.platform.core_2019_1.Passport;
import com.netsuite.webservices.platform.core_2019_1.Record;
import com.netsuite.webservices.platform.core_2019_1.RecordList;
import com.netsuite.webservices.platform.core_2019_1.RecordRef;
import com.netsuite.webservices.platform.core_2019_1.SearchResult;
import com.netsuite.webservices.platform.core_2019_1.SearchRowList;
import com.netsuite.webservices.platform.core_2019_1.SsoPassport;
import com.netsuite.webservices.platform.core_2019_1.TokenPassport;
import com.netsuite.webservices.platform.core_2019_1.TokenPassportSignature;
import com.netsuite.webservices.platform.core_2019_1.types.RecordType;
import com.netsuite.webservices.platform.messages_2019_1.ReadResponseList;
import com.netsuite.webservices.platform.messages_2019_1.WriteResponseList;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class Utils
{
    public static com.netsuite.webservices.platform.core_2019_1.Passport convertPassport(final Passport passport) {
        final com.netsuite.webservices.platform.core_2019_1.Passport endpointPassport = new com.netsuite.webservices.platform.core_2019_1.Passport();
        endpointPassport.setEmail(passport.getEmail());
        endpointPassport.setPassword(passport.getPassword());
        endpointPassport.setAccount(passport.getAccount());
        endpointPassport.setRole(createRecordRef(passport.getRole()));
        return endpointPassport;
    }
    
    public static com.netsuite.webservices.platform.core_2019_1.SsoPassport convertSsoPassport(final SsoPassport ssoPassport) {
        final com.netsuite.webservices.platform.core_2019_1.SsoPassport endpointSsoPassport = new com.netsuite.webservices.platform.core_2019_1.SsoPassport();
        endpointSsoPassport.setAuthenticationToken(ssoPassport.getAuthenticationToken());
        endpointSsoPassport.setPartnerId(ssoPassport.getPartnerId());
        endpointSsoPassport.setPartnerAccount(ssoPassport.getPartnerAccount());
        endpointSsoPassport.setPartnerUserId(ssoPassport.getPartnerUserId());
        return endpointSsoPassport;
    }
    
    public static com.netsuite.webservices.platform.core_2019_1.TokenPassport convertTokenPassport(final TokenPassport tokenPassport) {
        final com.netsuite.webservices.platform.core_2019_1.TokenPassport endpointTokenPassport = new com.netsuite.webservices.platform.core_2019_1.TokenPassport();
        endpointTokenPassport.setAccount(tokenPassport.getAccount());
        endpointTokenPassport.setConsumerKey(tokenPassport.getConsumerKey());
        endpointTokenPassport.setToken(tokenPassport.getToken());
        endpointTokenPassport.setNonce(tokenPassport.getNonce());
        endpointTokenPassport.setTimestamp(tokenPassport.getTimestamp());
        final TokenPassportSignature signature = new TokenPassportSignature();
        signature.setAlgorithm(tokenPassport.getSignatureAlgorithm().getNetSuiteFormat());
        signature.set_value(tokenPassport.getSignature());
        endpointTokenPassport.setSignature(signature);
        return endpointTokenPassport;
    }
    
    public static RecordRef createRecordRef(final String internalId) {
        final RecordRef recordRef = new RecordRef();
        recordRef.setInternalId(internalId);
        return recordRef;
    }
    
    public static RecordRef createRecordRef(final String internalId, final RecordType recordType) {
        final RecordRef recordRef = createRecordRef(internalId);
        recordRef.setType(recordType);
        return recordRef;
    }
    
    public static RecordRef createRecordRefWithExternalId(final String externalId, final RecordType recordType) {
        final RecordRef recordRef = new RecordRef();
        recordRef.setExternalId(externalId);
        recordRef.setType(recordType);
        return recordRef;
    }
    
    public static String getInternalId(final BaseRef baseRef) {
        try {
            final Method getInternalIdMethod = baseRef.getClass().getMethod("getInternalId", (Class<?>[])new Class[0]);
            return (String)getInternalIdMethod.invoke(baseRef, new Object[0]);
        }
        catch (NoSuchMethodException e2) {
            throw new UnsupportedOperationException("Cannot call getInternalId() on " + baseRef.getClass().getName());
        }
        catch (InvocationTargetException | IllegalAccessException ex2) {
            final ReflectiveOperationException ex;
            final ReflectiveOperationException e = ex;
            throw new IllegalStateException(e);
        }
    }
    
    public static List<String> getInternalIds(final WriteResponseList writeResponseList) {
        return Arrays.stream(writeResponseList.getWriteResponse()).map(writeResponse -> {
            if (writeResponse == null || !writeResponse.getStatus().isIsSuccess()) {
                return null;
            }
            else {
                return getInternalId(writeResponse.getBaseRef());
            }
        }).collect((Collector<? super Object, ?, List<String>>)Collectors.toList());
    }
    
    public static List<Boolean> getSuccess(final WriteResponseList writeResponseList) {
        return Arrays.stream(writeResponseList.getWriteResponse()).map(writeResponse -> writeResponse != null && writeResponse.getStatus().isIsSuccess()).collect((Collector<? super Object, ?, List<Boolean>>)Collectors.toList());
    }
    
    public static List<Record> getRecords(final ReadResponseList readResponseList) {
        return Arrays.stream(readResponseList.getReadResponse()).map(readResponse -> (readResponse == null) ? null : readResponse.getRecord()).collect((Collector<? super Object, ?, List<Record>>)Collectors.toList());
    }
    
    public static List<?> getSearchResults(final SearchResult searchResult) {
        if (searchResult == null || searchResult.getStatus() == null || !searchResult.getStatus().isIsSuccess()) {
            return null;
        }
        if (searchResult.getTotalRecords() == 0) {
            return Collections.emptyList();
        }
        final RecordList recordList = searchResult.getRecordList();
        final SearchRowList searchRowList = searchResult.getSearchRowList();
        if (recordList == null && searchRowList == null) {
            return null;
        }
        return Arrays.asList((Object[])((searchRowList != null) ? searchRowList.getSearchRow() : recordList.getRecord()));
    }
}
