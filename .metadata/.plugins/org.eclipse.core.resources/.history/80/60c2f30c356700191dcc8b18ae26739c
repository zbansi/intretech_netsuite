package com.netsuite.suitetalk.client.common.utils;

import com.netsuite.suitetalk.client.common.Constants;
import com.netsuite.suitetalk.client.common.SignatureAlgorithm;
import com.netsuite.suitetalk.client.common.authentication.TokenPassport;

import javax.annotation.ParametersAreNonnullByDefault;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

@ParametersAreNonnullByDefault
public final class TbaUtils
{
    private static final String DELIMITER = "&";
    
    public static String getBaseString(final TokenPassport tokenPassport) {
        return getBaseString(tokenPassport.getAccount(), tokenPassport.getConsumerKey(), tokenPassport.getToken(), tokenPassport.getNonce(), tokenPassport.getTimestamp());
    }
    
    public static String getBaseString(final String account, final String consumerKey, final String token, final String nonce, final long timestamp) {
        final String[] parameters = { account, consumerKey, token, nonce, String.valueOf(timestamp) };
        for (int i = 0; i < parameters.length; ++i) {
            try {
                parameters[i] = URLEncoder.encode(parameters[i], "UTF-8");
            }
            catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }
        return CommonUtils.concatenateStrings("&", parameters);
    }
    
    public static String getKey(final String consumerSecret, final String tokenSecret) {
        return CommonUtils.concatenateStrings("&", percentEncode(consumerSecret), percentEncode(tokenSecret));
    }
    
    public static String getSignature(final String key, final String baseString, final SignatureAlgorithm signatureAlgorithm) {
        try {
            final SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), signatureAlgorithm.getJavaFormat());
            final Mac messageAuthenticationCode = Mac.getInstance(signatureAlgorithm.getJavaFormat());
            messageAuthenticationCode.init(signingKey);
            final byte[] rawHmac = messageAuthenticationCode.doFinal(baseString.getBytes());
            return Base64.getEncoder().encodeToString(rawHmac);
        }
        catch (NoSuchAlgorithmException | InvalidKeyException ex2) {
            final GeneralSecurityException ex;
            final GeneralSecurityException e = ex;
            throw new RuntimeException(e);
        }
    }
    
    public static String percentEncode(final String string) {
        try {
            return URLEncoder.encode(string, "UTF-8").replace("+", "%20").replace("*", "%2A").replace("%7E", "~");
        }
        catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return null;
        }
    }
}
