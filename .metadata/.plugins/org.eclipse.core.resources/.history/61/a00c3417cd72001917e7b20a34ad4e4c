/**
 * search_columns.js
 * 
 * @NApiversion 2.x
 * @NModuleScope Public
 */

define([ 'N/search' ],
/**
 * @param {search} search
 */
function(search) {

	function setColumns(searchType) {
		var columnList = [];
		switch (searchType) {
		case search.Type.SALES_ORDER:
			[ 'entity', 'salesrep', 'linesequencenumber', 'item',
					'itemrevision', 'pricelevel', 'rate', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo', 'shipdate' ].forEach(function(e) {
				columnList.push(search.createColumn({
					name : e
				}));
			});
			return columnList;
			break;
		case search.Type.ITEM_FULFILLMENT:
			return [ 'entity', 'salesrep', 'linesequencenumber', 'item',
					'itemrevision', 'pricelevel', 'rate', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo', 'shipdate' ];
			break;

		case search.Type.WORK_ORDER:
			return [ 'item', 'itemrevision', 'iswip', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo' ];
			break;
		case search.Type.WORK_ORDER_ISSUE:
			return [ 'item', 'itemrevision', 'iswip', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo' ];
			break;
		case search.Type.WORK_ORDER_COMPLETION:
			return [ 'item', 'itemrevision', 'iswip', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo' ];
			break;
		case search.Type.WORK_ORDER_CLOSE:
			return [ 'item', 'itemrevision', 'iswip', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo' ];
			break;
		case search.Type.TRANSFER_ORDER:
			return [ 'entity', 'salesrep', 'linesequencenumber', 'item',
					'itemrevision', 'pricelevel', 'rate', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo', 'shipdate' ];
			break;
		case search.Type.INVENTORY_TRANSFER:
			return [ 'entity', 'salesrep', 'linesequencenumber', 'item',
					'itemrevision', 'pricelevel', 'rate', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo', 'shipdate' ];
			break;
		case search.Type.INVENTORY_ADJUSTMENT:
			return [ 'entity', 'salesrep', 'linesequencenumber', 'item',
					'itemrevision', 'pricelevel', 'rate', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo', 'shipdate' ];
			break;
		case search.Type.PURCHASE_ORDER:
			return [ 'entity', 'salesrep', 'linesequencenumber', 'item',
					'itemrevision', 'pricelevel', 'rate', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo', 'shipdate' ];
			break;
		case search.Type.ITEM_RECEIPT:
			return [ 'entity', 'salesrep', 'linesequencenumber', 'item',
					'itemrevision', 'pricelevel', 'rate', 'status', 'trandate',
					'startdate', 'enddate', 'quantity', 'quantityuom', 'unit',
					'firmed', 'memo', 'shipdate' ];
			break;
		default:
			break;
		}
	}

	function setJoinColumns(searchType) {
		var _salesOrderSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _purchaseOrderSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _workOrderSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _transferOrderSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _salesOrderFulfillmentSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _purchaseOrderItemReceiptSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _workOrderIssueSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _workOrderCompletionSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _workOrderCloseSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _inventoryAdjustmentSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var _inventoryTransferSearchJoins = {
			'location' : [ 'name' ],
			'subsidiary' : [ 'name' ],
			'item' : [ 'itemid' ]
		};
		var joinColumns = [];
		switch (searchType) {
		case search.Type.SALES_ORDER:
			for ( var key in _salesOrderSearchJoins) {
				if (_salesOrderSearchJoins.hasOwnProperty(key)) {
					_salesOrderSearchJoins[key].forEach(function(value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;

		case search.Type.ITEM_FULFILLMENT:
			for ( var key in _salesOrderFulfillmentSearchJoins) {
				if (_salesOrderFulfillmentSearchJoins.hasOwnProperty(key)) {
					_salesOrderFulfillmentSearchJoins[key].forEach(function(
							value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;

		case search.Type.WORK_ORDER:
			for ( var key in _workOrderSearchJoins) {
				if (_workOrderSearchJoins.hasOwnProperty(key)) {
					_workOrderSearchJoins[key].forEach(function(value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;
		case search.Type.WORK_ORDER_ISSUE:
			for ( var key in _workOrderIssueSearchJoins) {
				if (_workOrderIssueSearchJoins.hasOwnProperty(key)) {
					_workOrderIssueSearchJoins[key].forEach(function(value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;
		case search.Type.WORK_ORDER_COMPLETION:
			for ( var key in _workOrderCompletionSearchJoins) {
				if (_workOrderCompletionSearchJoins.hasOwnProperty(key)) {
					_workOrderCompletionSearchJoins[key]
							.forEach(function(value) {
								joinColumns.push(search.createColumn({
									name : value,
									join : key
								}));
							});
				}
			}
			return joinColumns;
			break;
		case search.Type.WORK_ORDER_CLOSE:
			for ( var key in _workOrderCloseSearchJoins) {
				if (_workOrderCloseSearchJoins.hasOwnProperty(key)) {
					_workOrderCloseSearchJoins[key].forEach(function(value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;
		case search.Type.TRANSFER_ORDER:
			for ( var key in _transferOrderSearchJoins) {
				if (_transferOrderSearchJoins.hasOwnProperty(key)) {
					_transferOrderSearchJoins[key].forEach(function(value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;
		case search.Type.INVENTORY_TRANSFER:
			for ( var key in _inventoryTransferSearchJoins) {
				if (_inventoryTransferSearchJoins.hasOwnProperty(key)) {
					_inventoryTransferSearchJoins[key].forEach(function(value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;
		case search.Type.INVENTORY_ADJUSTMENT:
			for ( var key in _inventoryAdjustmentSearchJoins) {
				if (_inventoryAdjustmentSearchJoins.hasOwnProperty(key)) {
					_inventoryAdjustmentSearchJoins[key]
							.forEach(function(value) {
								joinColumns.push(search.createColumn({
									name : value,
									join : key
								}));
							});
				}
			}
			return joinColumns;
			break;
		case search.Type.PURCHASE_ORDER:
			for ( var key in _purchaseOrderSearchJoins) {
				if (_purchaseOrderSearchJoins.hasOwnProperty(key)) {
					_purchaseOrderSearchJoins[key].forEach(function(value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;
		case search.Type.ITEM_RECEIPT:
			for ( var key in _purchaseOrderItemReceiptSearchJoins) {
				if (_purchaseOrderItemReceiptSearchJoins.hasOwnProperty(key)) {
					_purchaseOrderItemReceiptSearchJoins[key].forEach(function(
							value) {
						joinColumns.push(search.createColumn({
							name : value,
							join : key
						}));
					});
				}
			}
			return joinColumns;
			break;
		default:
			break;
		}
	}

	return {
		'setColumns' : setColumns,
		'setJoinColumns' : setJoinColumns
	}
});
