package com.bansi.webservices.samples.test;

import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;

import org.omg.CORBA.DataInputStream;

import com.netsuite.webservices.lists.accounting_2019_1.Bom;

public class Test {

	public static void main(String[] args) throws IOException {
		//new FileInputStream("interfacedata.json");
		BufferedInputStream in = null;
		try {
			in = new BufferedInputStream(new FileInputStream("interface_data.json"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String object = "";
		try {
			while (in.available() != 0) {
				//System.out.print((char) in.read());
				object += (char) in.read();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//

		System.out.println("xxxxx" + object);

		JSONObject jsonObject = JSONObject.fromObject(object);
		/*
		jsonObject.accumulate("name", "suitetalk.bom.test");
		jsonObject.accumulate("usedOnAssembly", true);
		jsonObject.accumulate("createdDate", "5/21/2019");
		jsonObject.accumulate("isInactive", false);
		jsonObject.accumulate("useComponentYield", true);
		jsonObject.accumulate("memo", "test by bansi");
		jsonObject.accumulate("legacyBomForAssembly", "");
		jsonObject.accumulate("availableForAllAssemblies", false);
		jsonObject.accumulate("restrictToAssembliesList", "");
		jsonObject.accumulate("availableForAllLocations", "");
		jsonObject.accumulate("restrictToLocationsList", "");
		jsonObject.accumulate("subsidiaryList", "");
		jsonObject.accumulate("includeChildren", true);
		jsonObject.accumulate("customFieldList", "");
		jsonObject.accumulate("internalId", "1001");
		jsonObject.accumulate("externalId", "1234");
		*/
		System.out.println(jsonObject.toString());

		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.setRootClass(Bom.class);
		Bom newBom = (Bom) JSONObject.toBean(jsonObject, jsonConfig);

		System.out.println(newBom.toString());
		System.out.println(newBom.getName());
		System.out.println(newBom.getMemo());
		System.out.println(newBom.getInternalId());

	}
}
